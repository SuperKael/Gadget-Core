<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GadgetCore</name>
    </assembly>
    <members>
        <member name="T:GadgetCore.API.ChipInfo">
            <summary>
            Defines a custom Chip. Make sure to call Register on it to register your Chip.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.Type">
            <summary>
            The ChipType of this Chip
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.Name">
            <summary>
            The name of this Chip
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.Desc">
            <summary>
            The description of this Chip
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.Cost">
            <summary>
            The cost to use this active Chip
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.Stats">
            <summary>
            The stats of this passive Chip
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.CostType">
            <summary>
            The type of cost of this active Chip, either MANA, ENERGY, HEALTH, or HEALTH_LETHAL
            </summary>
        </member>
        <member name="P:GadgetCore.API.ChipInfo.Tex">
            <summary>
            The Texture associated with this Chip. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ChipInfo.Mat">
            <summary>
            The Material associated with this Chip. May be null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.#ctor(GadgetCore.API.ChipType,System.String,System.String,System.Int32,UnityEngine.Texture,GadgetCore.API.EquipStats,GadgetCore.API.ChipInfo.ChipCostType)">
            <summary>
            Use to create a new ChipInfo. Make sure to call Register on it to register your Chip.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.#ctor(GadgetCore.API.ChipType,System.String,System.String,System.Int32,UnityEngine.Material,GadgetCore.API.EquipStats,GadgetCore.API.ChipInfo.ChipCostType)">
            <summary>
            Use to create a new ChipInfo. Make sure to call Register on it to register your Chip.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this ChipInfo to the ChipRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.ChipInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipInfo.IsChipActive(System.Int32)">
            <summary>
            Checks if the chip should be considered to currently be in use, and should not be allowed to be activated again. Override to add custom behavior - by default, always returns false.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ChipInfo.OnUse">
            <summary>
            Invoked whenever this chip is activated. Will never be invoked if the ChipType is not ACTIVE. The int parameter is the slot the chip is in.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ChipInfo.OnEquip">
            <summary>
            Invoked whenever this chip is equipped. The int parameter is the slot the chip is being equipped to. This is invoked immediately after the chip is placed into the slot.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ChipInfo.OnDequip">
            <summary>
            Invoked whenever this chip is dequipped. The int parameter is the slot the chip is being dequipped from. This is invoked immediately before the chip is removed from the slot.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ChipInfo.ChipCostType">
            <summary>
            This indicates what should the active chip's cost represent.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.ChipCostType.MANA">
            <summary>
            The cost represents a number of points of mana, as normal chips do.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.ChipCostType.ENERGY">
            <summary>
            The cost represents a number of points of stamina.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.ChipCostType.HEALTH_SAFE">
            <summary>
            The cost represents a number of points of health, although activating the chip will be unable to kill the player, and if it would the activation fails.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.ChipCostType.HEALTH_LETHAL">
            <summary>
            The cost represents a number of points of health, and activating the chip is able to kill the player if they have less than or equal to the number of points of health that the cost requires. If the player dies from attempting to activate this chip, then the effect does not get activated.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipInfo.ChipCostType.HEALTH_LETHAL_POSTMORTEM">
            <summary>
            The cost represents a number of points of health, and activating the chip is able to kill the player if they have less than or equal to the number of points of health that the cost requires. If the player dies from attempting to activate this chip, then the effect still activates. Note that at the moment of invocation, the player well have 0 or less health, and will be flagged as dead (GameScript.dead == true) but the death screen will not have opened yet, and the death will be canceled if the chip restores the player's health.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ChipRegistry">
            <summary>
            This registry is filled with ChipInfos, and is used for registering custom chips to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.ChipRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.GetChipIDByName(System.String)">
            <summary>
            Gets the item ID for the given name. Case-insensitive. Returns -1 if there is no item with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.GetChipIDByRegistryName(System.String)">
            <summary>
            Gets the item ID for the given registry name. Case-insensitive. Returns -1 if there is no item with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.PostRegistration(GadgetCore.API.ChipInfo)">
            <summary>
            Called after the specified Registry Entry has been registered. You should never call this yourself. Note that this is called before <see cref="M:GadgetCore.API.RegistryEntry`2.PostRegister"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.OnUnregister(GadgetCore.API.ChipInfo)">
            <summary>
            Called just before an entry is removed from the registry by <see cref="M:GadgetCore.API.Registry.UnregisterGadget(GadgetCore.API.GadgetInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.ChipRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.ChipRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ChipType">
            <summary>
            Specifies what type of chip this is. If you wish for your chip to grant both passive and active effects, use ACTIVE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipType.PASSIVE">
            <summary>
            This chip is passive, and cannot be activated.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ChipType.ACTIVE">
            <summary>
            This chip is active, and can be activated. Note that active chips can still grant passive effects, if you desire.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu">
            <summary>
            Basic <see cref="T:GadgetCore.API.ConfigMenu.IGadgetConfigMenu"/> implementation that displays a list of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/>s.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.ConfigComponents">
            <summary>
            List of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/>s on this config menu.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.MenuParent">
            <summary>
            The parent object of this config menu. Will be null until the menu is built.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.HasBuilt">
            <summary>
            Whether this menu has been built yet.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.HidesModMenu">
            <summary>
            Specifies whether the mod menu should be hidden when this config menu is opened.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.scrollPositionCache">
            <summary>
            Used to cache the scroll position of the body ScrollRect. Allows preservation of scroll level on rebuild.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.#ctor(System.Boolean,GadgetCore.API.ConfigMenu.GadgetConfigComponent[])">
            <summary>
            Constructs a new instance of <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/>. Optionally adds <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/>s in the process. <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/>s can also be added later using <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.AddComponent(GadgetCore.API.ConfigMenu.GadgetConfigComponent,GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment)"/>, but only before the menu is built.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.AddComponent(GadgetCore.API.ConfigMenu.GadgetConfigComponent,GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment)">
            <summary>
            Adds a <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> to this config menu. May only be called before the menu is built.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.InsertComponent(System.Int32,GadgetCore.API.ConfigMenu.GadgetConfigComponent,GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment)">
            <summary>
            Adds a <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> to this config menu, at a specified index in the component array. May only be called before the menu is built.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)">
            <summary>
            Called for every configurable mod and Gadget when the Mod Menu is injected into the title screen. This is called again if the player returns to the title screen after having selected a character. You should never call this yourself.
            </summary>
            <param name="parent">A <see cref="T:UnityEngine.RectTransform"/> on the Mod Menu canvas intended to be used as the parent object of your config menu. This object will have a large background <see cref="T:UnityEngine.UI.Image">Image</see> on it, intended to be the background of your config menu. Feel free to change or remove this background. This object will also be enabled and disabled as needed to open and close the config menu.</param>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Clear">
            <summary>
            Removes all <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/>s from this <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/>. You should call <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Rebuild"/> sometime after this to update the displayed menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Reset">
            <summary>
            Called to make the config menu totally reset itself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Rebuild">
            <summary>
            Called whenever this mod's config menu is opened. The parent <see cref="T:UnityEngine.RectTransform"/> that was passed to <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> will be enabled immediately after this method is called. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Render">
            <summary>
            Called whenever this mod's config menu is opened. The parent <see cref="T:UnityEngine.RectTransform"/> that was passed to <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> will be enabled immediately after this method is called. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Derender">
            <summary>
            Called whenever this mod's config menu is closed. The parent <see cref="T:UnityEngine.RectTransform"/> that was passed to <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> will be disabled immediately before this method is called. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Update">
            <summary>
            Called whenever the config menu's contents are updated in some way. You should probably call this yourself whenever the config menu's contents are updated somehow.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.ShouldHideModMenu">
            <summary>
            Called when this config menu is opened, to check whether the mod menu behind your config menu should be hidden when your config menu is opened.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a pair of toggles for representing a bool-based config value.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Boolean,System.Action{System.Boolean},System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent"/> that serves as a pair of toggles for representing a bool-based config value. The given <paramref name="valueSetter"/> will be called whenever the value is changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigBoolComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigButtonComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a button that can execute arbitrary code when pressed.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigButtonComponent.Label">
            <summary>
            The label on this button.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigButtonComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String,System.Action,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigButtonComponent"/> that serves as a button that can execute arbitrary code when pressed. The given <paramref name="trigger"/> will be called whenever the button is pressed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigButtonComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent">
            <summary>
            A component intended to be used in a <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/> representing a single config entry.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigComponent.ConfigMenu">
            <summary>
            The <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/> that this component is a part of.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Name">
            <summary>
            The name of this component.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Height">
            <summary>
            Indicates how tall this component is, as a percentage of the total height of the config menu.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Alignment">
            <summary>
            Specifies the alignment of this component. 
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Single)">
            <summary>
            Constructs a new component with the given name and height.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Render">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Render"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Derender">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Derender"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Update">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Update"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.UpdateHeight(System.Single)">
            <summary>
            Use to change the height of this component. Will trigger the config menu to update all components. As such, do not call this as part of <see cref="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.Update"/>, or you will cause a <see cref="T:System.StackOverflowException"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigComponent.SetAlignment(GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment)">
            <summary>
            Sets the alignment of this component. You should not call this yourself, and this must not be called after the component has been built.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment">
            <summary>
            Specifies the alignment of a component in the config menu.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment.STANDARD">
            <summary>
            The component will be positioned in the main body of the config menu.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment.HEADER">
            <summary>
            The component will be positioned as a non-scrolling header to the config menu. 
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigComponentAlignment.FOOTER">
            <summary>
            The component will be positioned as a non-scrolling footer to the config menu.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a input field for representing an double-based config value.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MinValue">
            <summary>
            The minimum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MaxValue">
            <summary>
            The maximum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.Decimals">
            <summary>
            The level of decimal precision to allow in the input. If this is negative, then it is ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Double,System.Action{System.Double},System.Double,System.Double,System.Int32,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent"/> that serves as a input field for representing an double-based config value. The given <paramref name="valueSetter"/> will be called whenever the input field's contents are changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigDoubleComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a dropdown for selecting from an array of choices.
            Based on code provided by "Zariteis" on the New Roguelands Discord server.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.Values">
            <summary>
            The selectable values of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String,System.String[],System.Action{System.String},System.Boolean,System.String,System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent"/> that serves as a dropdown for selecting from an array of choices. The given <paramref name="valueSetter"/> will be called whenever the dropdown's selection is changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigDropdownComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a input field for representing an float-based config value.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MinValue">
            <summary>
            The minimum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MaxValue">
            <summary>
            The maximum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.Decimals">
            <summary>
            The level of decimal precision to allow in the input. If this is negative, then it is ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Single,System.Action{System.Single},System.Single,System.Single,System.Int32,System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent"/> that serves as a input field for representing an float-based config value. The given <paramref name="valueSetter"/> will be called whenever the input field's contents are changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigFloatComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a input field for representing an int-based config value.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MinValue">
            <summary>
            The minimum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MaxValue">
            <summary>
            The maximum value of this component. If <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MinValue"/> is not less than <see cref="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.MaxValue"/>, then they are ignored.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Int32,System.Action{System.Int32},System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent"/> that serves as a input field for representing an int-based config value. The given <paramref name="valueSetter"/> will be called whenever the input field's contents are changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigIntComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a button where you can enter a keybind.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.AllowMultiBind">
            <summary>
            Whether to allow multi-key bindings.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String,System.Action{System.String},System.Boolean,System.Boolean,System.String,System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent"/> that serves as a button where you can enter a keybind. The given <paramref name="valueSetter"/> will be called whenever the keybind is changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigKeybindComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that simply displays a piece of text.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent.Text">
            <summary>
            The text that is displayed by this label.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent.AllowHeightResize">
            <summary>
            Whether the text height may be resized in the case of text overflow. Be aware that this resizing operation is not perfect - as such, you should avoid using it when possible.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent.InitialHeight">
            <summary>
            The height of this component before resizing the height to match the text height.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent"/> that simply displays a piece of text.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigLabelComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as one or more buttons where you can enter one or more keybinds.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.AllowMultiBind">
            <summary>
            Whether to allow multi-key bindings.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String[],System.Action{System.String[]},System.Boolean,System.Boolean,System.String[],System.String[],System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent"/> that serves as one or more buttons where you can enter one or more keybinds. The given <paramref name="valueSetter"/> will be called whenever the keybinds are changed. Be aware that the given height value is only the height of one entry in the list. The actual height can vary depending on the number of set keybinds.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigMultiKeybindComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as one or more textboxes where you can enter one or more string values.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String[],System.Action{System.String[]},System.Boolean,System.String[],System.String[],System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent"/> that serves as one or more textboxes where you can enter one or more string values. The given <paramref name="valueSetter"/> will be called whenever the values are changed. Be aware that the given height value is only the height of one entry in the list. The actual height can vary depending on the number of set values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigMultiStringComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigSeparatorComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that creates a separator in the config menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigSeparatorComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigSeparatorComponent"/> that creates a separator in the config menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigSeparatorComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigSpacerComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that creates a blank space in the config menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigSpacerComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigSpacerComponent"/> that creates a blank space in the config menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigSpacerComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent">
            <summary>
            This is an implementation of <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigComponent"/> that serves as a textbox for representing a string-based config value.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.Value">
            <summary>
            The current value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.DefaultValue">
            <summary>
            The default value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.VanillaValue">
            <summary>
            The vanilla value of this component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.ReadOnly">
            <summary>
            Whether this component is read-only.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.#ctor(GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu,System.String,System.String,System.Action{System.String},System.Boolean,System.String,System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent"/> that serves as a textbox for representing a string-based config value. The given <paramref name="valueSetter"/> will be called whenever the textbox's contents are changed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetConfigStringComponent.Build(UnityEngine.RectTransform)">
            <summary>
            Called when <see cref="M:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> is called on the config menu containing this component.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.GadgetModConfigs">
            <summary>
            Tracker for <see cref="T:GadgetCore.API.ConfigMenu.IGadgetConfigMenu"/>s.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.GetConfigMenu(System.Int32)">
            <summary>
            Gets the <see cref="T:GadgetCore.API.ConfigMenu.IGadgetConfigMenu"/> for the given ID. Returns null if the mod with the given ID does not have a config menu. Throws an <see cref="T:System.IndexOutOfRangeException"/> if the ID is invalid.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.GetConfigMenuObject(System.Int32)">
            <summary>
            Gets the <see cref="T:UnityEngine.RectTransform"/> for config menu the given ID. Returns null if the mod with the given ID does not have a config menu. Throws an <see cref="T:System.IndexOutOfRangeException"/> if the ID is invalid.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.IsConfigMenuOpen(System.Int32)">
            <summary>
            Checks if the specified config menu is currently open.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.OpenConfigMenu(System.Int32)">
            <summary>
            Opens the specified config menu.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.CloseConfigMenu(System.Int32,System.Boolean)">
            <summary>
            Closes the specified config menu. Also, if <paramref name="showModMenu"/> is true, then displays the Mod Menu (if it isn't already being displayed).
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.CloseAllConfigMenus(System.Boolean)">
            <summary>
            Closes any and all config menus. Also, if <paramref name="showModMenu"/> is true, then displays the Mod Menu (if it isn't already being displayed).
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.RebuildAllConfigMenus">
            <summary>
            Rebuilds all config menus.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.GadgetModConfigs.ResetAllConfigMenus">
            <summary>
            Resets all config menus.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.IGadgetConfigMenu">
            <summary>
            Interface for Gadget Config Menu renderers. Most likely, you would be better of using <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/> or <see cref="T:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Build(UnityEngine.RectTransform)">
            <summary>
            Called for every configurable mod and Gadget when the Mod Menu is injected into the title screen. This is called again if the player returns to the title screen after having selected a character. You should never call this yourself.
            </summary>
            <param name="parent">A <see cref="T:UnityEngine.RectTransform"/> on the Mod Menu canvas intended to be used as the parent object of your config menu. This object will have a large background <see cref="T:UnityEngine.UI.Image">Image</see> on it, intended to be the background of your config menu. Feel free to change or remove this background. This object will also be enabled and disabled as needed to open and close the config menu.</param>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Reset">
            <summary>
            Called to make the config menu totally reset itself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Rebuild">
            <summary>
            Called to make the config menu rebuild itself. 
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Render">
            <summary>
            Called whenever this mod's config menu is opened. The parent <see cref="T:UnityEngine.RectTransform"/> that was passed to <see cref="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> will be enabled immediately after this method is called. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Derender">
            <summary>
            Called whenever this mod's config menu is closed. The parent <see cref="T:UnityEngine.RectTransform"/> that was passed to <see cref="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Build(UnityEngine.RectTransform)"/> will be disabled immediately before this method is called. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.Update">
            <summary>
            Called whenever the config menu's contents are updated on some way. You should probably call this yourself whenever the config menu's contents are updated somehow.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.IGadgetConfigMenu.ShouldHideModMenu">
            <summary>
            Called when this config menu is opened, to check whether the mod menu behind your config menu should be hidden when your config menu is opened.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu">
            <summary>
            This is an extension of <see cref="T:GadgetCore.API.ConfigMenu.BasicGadgetConfigMenu"/> that auto-generates its contents from an INI-based config file. This will always be used for non-Gadgets, and is also the default if you don't specify your own config menu.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.PASCAL_CASE_SPACING_REGEX">
            <summary>
            Regex for inserting spaces into PascalCase strings.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.NO_CONFIGURABLE_DATA">
            <summary>
            The exception that occurs if the given config file has no configurable data.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.ConfigFilePath">
            <summary>
            The path to the config file that this menu is for.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.ConfigFileSection">
            <summary>
            The Ini section of the config file that this config menu is for.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.ReadonlyEntries">
            <summary>
            All config entries that match names in this list are displayed as read-only.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.IniParser">
            <summary>
            The <see cref="T:IniParser.FileIniDataParser"/> used for accessing the config file.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.Ini">
            <summary>
            The <see cref="T:IniParser.Model.IniData"/> for the config file.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.autoReload">
            <summary>
            If not null, auto-reloads the configs for the given <see cref="T:GadgetCore.ModMenuEntry"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.#ctor(System.String,System.Boolean,System.String,GadgetCore.ModMenuEntry,System.String[])">
            <summary>
            Constructs a UMFGadgetConfigMenu, optionally for a given ini file section and given config file path. Throws an <see cref="T:System.InvalidOperationException"/> with the message <see cref="F:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.NO_CONFIGURABLE_DATA"/> if the given config file has no configurable data.
            </summary>
            <param name="section">The Ini file section to reference. If the specified section is not present, then the section matching the config file's name will be used instead.</param>
            <param name="hidesModMenu">Specifies whether the mod menu should be hidden when this config menu is opened.</param>
            <param name="configFilePath">Specifies the location of the config file to reference. If left unspecified, the standard config file for your mod will be used.</param>
            <param name="autoReload">If not null, auto-reloads the configs for the given <see cref="T:GadgetCore.ModMenuEntry"/>.</param>
            <param name="readonlyEntries">All config entries that match names in this list will be displayed as read-only.</param>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.LoadConfigFile(System.String,System.String,System.String[])">
            <summary>
            Loads the given config file, and adds all of the entries within to this <see cref="T:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.Reset">
            <summary>
            Called to make the config menu totally reset itself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.AlignConfigEntry(System.String)">
            <summary>
            Used for validation and alignment of config entries being read from the config file. Return an alignment to align, or return null to prevent the entry from appearing in the menu.
            </summary>
            <param name="name">The name of the config entry</param>
        </member>
        <member name="M:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu.Update">
            <summary>
            Called whenever the config menu's contents are updated in some way. This will be called whenever a default component's value is changed.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo">
            <summary>
            Represents a craft menu, such as the emblem forge or the alchemy station. Also includes custom craft menus.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.Title">
            <summary>
            The title to be displayed when this craft menu is open.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.Desc">
            <summary>
            The description to be displayed when this craft menu is open.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.MenuTex">
            <summary>
            The Texture to be used to display this craft menu.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ProgressBarTex">
            <summary>
            The Texture to be used to display the craft progress bar.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonInactiveTex">
            <summary>
            The Texture to be used to display the inactive craft button.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonActiveTex">
            <summary>
            The Texture to be used to display the active craft button.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonSelectTex">
            <summary>
            The Texture to be used to display the selected craft button.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.MenuMat">
            <summary>
            The Material to be used to display this craft menu.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ProgressBarMat">
            <summary>
            The Material to be used to display the craft progress bar.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonInactiveMat">
            <summary>
            The Material to be used to display the inactive craft button.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonActiveMat">
            <summary>
            The Material to be used to display the active craft button.
            </summary>
        </member>
        <member name="P:GadgetCore.API.CraftMenuInfo.ButtonSelectMat">
            <summary>
            The Material to be used to display the selected craft button.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftSound">
            <summary>
            The sound effect that plays every time the craft button is pressed.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.SlotValidators">
            <summary>
            The list of validators for determining if an item fits a slot. If any of the validators return true for a slot, then it should be considered valid.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftValidators">
            <summary>
            The list of validators for determining if the current items in the craft menu form a valid recipe. The validators should be checked in reverse order, and then if one of the validators returns true, then the <see cref="T:GadgetCore.API.CraftMenuInfo.CraftPerformer"/> in the <see cref="F:GadgetCore.API.CraftMenuInfo.CraftPerformers"/> list at the same index as the succesful validator should be used.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftPerformers">
            <summary>
            The list of performers used for performing a crafting recipe, only after the matching validator passes.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftFinalizers">
            <summary>
            The list of finalizers used when completing a crafting recipe, after the matching validator executes.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftPerformerModIDs">
            <summary>
            The list of Mod IDs that match the registered craft performers. These values will change when ReplaceCraftPerformer is called. May be the same as the entry in <see cref="F:GadgetCore.API.CraftMenuInfo.CraftPerformerInitModIDs"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.CraftPerformerInitModIDs">
            <summary>
            The list of Mod IDs that match the registered craft performers when they were first registered. May be the same as the entry in <see cref="F:GadgetCore.API.CraftMenuInfo.CraftPerformerModIDs"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.craftResult">
            <summary>
            Stores what the state of the recipe will be after it is complete.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.unlockedRecipes">
            <summary>
            List of IDs representing the outputs of recipes that have been crafted before.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.activePerformer">
            <summary>
            The performer index for the recipe currently being crafted.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.AudioClip,GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer,GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuTex">The Texture to use for the crafting window.</param>
            <param name="ProgressBarTex">The Texture to use for the crafting progress bar.</param>
            <param name="ButtonInactiveTex">The Texture to be used to display the inactive craft button.</param>
            <param name="ButtonActiveTex">The Texture to be used to display the active craft button.</param>
            <param name="ButtonSelectTex">The Texture to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="SlotValidator">Used to check if an item is valid for a slot.</param>
            <param name="CraftValidator">Used to check if the items currently in the slots are valid for a recipe. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="CraftPerformer">Used to perform a crafting operation by modifying the contents of the Item array. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output. Should decrement the inputs, and set the output, possibly respecting whatever is already in the output.</param>
            <param name="CraftFinalizer">Optionally used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.AudioClip,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer},GadgetCore.API.CraftMenuInfo.CraftFinalizer,GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuTex">The Texture to use for the crafting window.</param>
            <param name="ProgressBarTex">The Texture to use for the crafting progress bar.</param>
            <param name="ButtonInactiveTex">The Texture to be used to display the inactive craft button.</param>
            <param name="ButtonActiveTex">The Texture to be used to display the active craft button.</param>
            <param name="ButtonSelectTex">The Texture to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="PerformerTuple">A <see cref="T:GadgetCore.Util.Tuple`3"/> containing the SlotValidator, CraftValidator, and CraftPerformer.</param>
            <param name="CraftFinalizer">Optionally used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.AudioClip,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer},GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuTex">The Texture to use for the crafting window.</param>
            <param name="ProgressBarTex">The Texture to use for the crafting progress bar.</param>
            <param name="ButtonInactiveTex">The Texture to be used to display the inactive craft button.</param>
            <param name="ButtonActiveTex">The Texture to be used to display the active craft button.</param>
            <param name="ButtonSelectTex">The Texture to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="PerformerTuple">A <see cref="T:GadgetCore.Util.Tuple`4"/> containing the SlotValidator, CraftValidator, CraftPerformer, and CraftFinalizer.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.AudioClip,GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer,GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuMat">The Material to use for the crafting window.</param>
            <param name="ProgressBarMat">The Material to use for the crafting progress bar.</param>
            <param name="ButtonInactiveMat">The Material to be used to display the inactive craft button.</param>
            <param name="ButtonActiveMat">The Material to be used to display the active craft button.</param>
            <param name="ButtonSelectMat">The Material to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="SlotValidator">Used to check if an item is valid for a slot.</param>
            <param name="CraftValidator">Used to check if the items currently in the slots are valid for a recipe. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="CraftPerformer">Used to perform a crafting operation by modifying the contents of the Item array. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output. Should decrement the inputs, and set the output, possibly respecting whatever is already in the output.</param>
            <param name="CraftFinalizer">Optionally used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.AudioClip,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer},GadgetCore.API.CraftMenuInfo.CraftFinalizer,GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuMat">The Material to use for the crafting window.</param>
            <param name="ProgressBarMat">The Material to use for the crafting progress bar.</param>
            <param name="ButtonInactiveMat">The Material to be used to display the inactive craft button.</param>
            <param name="ButtonActiveMat">The Material to be used to display the active craft button.</param>
            <param name="ButtonSelectMat">The Material to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="PerformerTuple">A <see cref="T:GadgetCore.Util.Tuple`3"/> containing the SlotValidator, CraftValidator, and CraftPerformer.</param>
            <param name="CraftFinalizer">Optionally used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.#ctor(System.String,System.String,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.AudioClip,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer},GadgetCore.API.TileInfo)">
            <summary>
            Use to register a custom crafting menu. Using RegisterMenu is unnecessary for crafting menus. Note that all crafting menus must have, at most, 3 ingredient slots. Use OpenCraftMenu to open the menu.
            </summary>
            <param name="Title">The text to display as the title of the crafting window.</param>
            <param name="Desc">The text to display as the description of the crafting window.</param>
            <param name="MenuMat">The Material to use for the crafting window.</param>
            <param name="ProgressBarMat">The Material to use for the crafting progress bar.</param>
            <param name="ButtonInactiveMat">The Material to be used to display the inactive craft button.</param>
            <param name="ButtonActiveMat">The Material to be used to display the active craft button.</param>
            <param name="ButtonSelectMat">The Material to be used to display the selected craft button.</param>
            <param name="CraftSound">The sound effect that plays every time the craft button is pressed.</param>
            <param name="PerformerTuple">A <see cref="T:GadgetCore.Util.Tuple`4"/> containing the SlotValidator, CraftValidator, CraftPerformer, and CraftFinalizer.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.UnlockRecipe(System.Int32)">
            <summary>
            Adds the given ID to the list of recipes that have been crafted before.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.IsRecipeUnlocked(System.Int32)">
            <summary>
            Returns whether the given recipe is unlocked.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.GetCraftValue(System.Int32)">
            <summary>
            Returns the progress made on the craft bar per hit of the craft button (from 1-100).
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AllowQuickCrafting">
            <summary>
            Indicates whether the quick-crafting menu is enabled for this <see cref="T:GadgetCore.API.CraftMenuInfo"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.OpenMenuRoutine">
            <summary>
            Opens this CraftMenu
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.CloseMenuRoutine">
            <summary>
            Closes this CraftMenu
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AddCraftPerformer(GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer})">
            <summary>
            Registers another CraftPerformer to this CraftMenuInfo. Returns the index that the performer was registered to.
            </summary>
            <param name="PerformerTuple">The Tuple containing the SlotValidator, CraftValidator, and CraftPerformer for this performer.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AddCraftPerformer(GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer})">
            <summary>
            Registers another CraftPerformer to this CraftMenuInfo. Returns the index that the performer was registered to.
            </summary>
            <param name="PerformerTuple">The Tuple containing the SlotValidator, CraftValidator, CraftPerformer, and CraftFinalizer for this performer.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AddCraftPerformer(GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer)">
            <summary>
            Registers another CraftPerformer to this CraftMenuInfo. Returns the index that the performer was registered to.
            </summary>
            <param name="SlotValidator">Used to check if an item is valid for a slot.</param>
            <param name="CraftValidator">Used to check if the items currently in the slots are valid for a recipe. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="CraftPerformer">Used to perform a crafting operation by modifying the contents of the Item array. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output. Should decrement the inputs, and set the output, possibly respecting whatever is already in the output.</param>
            <param name="CraftFinalizer">Optionally used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.ReplaceCraftPerformer(System.Int32,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer})">
            <summary>
            Replaces an existing CraftPerformer on this CraftMenuInfo.
            </summary>
            <param name="index">The index of the CraftPerformer to replace</param>
            <param name="PerformerTuple">The Tuple containing the SlotValidator, CraftValidator, and CraftPerformer for this performer.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.ReplaceCraftPerformer(System.Int32,GadgetCore.Util.Tuple{GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer})">
            <summary>
            Replaces an existing CraftPerformer on this CraftMenuInfo.
            </summary>
            <param name="index">The index of the CraftPerformer to replace</param>
            <param name="PerformerTuple">The Tuple containing the SlotValidator, CraftValidator, CraftPerformer, and CraftFinalizer for this performer.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.ReplaceCraftPerformer(System.Int32,GadgetCore.API.CraftMenuInfo.SlotValidator,GadgetCore.API.CraftMenuInfo.CraftValidator,GadgetCore.API.CraftMenuInfo.CraftPerformer,GadgetCore.API.CraftMenuInfo.CraftFinalizer)">
            <summary>
            Replaces an existing CraftPerformer on this CraftMenuInfo.
            </summary>
            <param name="index">The index of the CraftPerformer to replace</param>
            <param name="SlotValidator">A Func that is used to check if an item is valid for a slot.</param>
            <param name="CraftValidator">A Func that is used to check if the items currently in the slots are valid for a recipe. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
            <param name="CraftPerformer">An Action that is used to perform a crafting operation by modifying the contents of the Item array. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output. Should decrement the inputs, and set the output, possibly respecting whatever is already in the output.</param>
            <param name="CraftFinalizer">Used to perform any final behavior after the craft is complete. The Item array is of length 4, where the first three Items are the inputs, and the fourth Item is the output.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.RemoveCraftPerformer(System.Int32)">
            <summary>
            Removes a CraftPerformer from this CraftMenuInfo, given its index. 
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.RemoveModCraftPerformers(System.Int32)">
            <summary>
            Removes all CraftPerformers that were added by the given mod
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.ValidateSlot(Item,Item[],System.Int32)">
            <summary>
            Validates an Item for insertion into a specified slot. Returns true if validation was successful and the Item should fit in the given slot, or false otherwise.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.CreateSimpleCraftPerformer(GadgetCore.Util.Tuple{System.Int32[],Item,System.Int32}[])">
            <summary>
            Generates a standard SlotValidator/CraftValidator/CraftPerformer trio using a simple set of input IDs and an output Item
            </summary>
            <param name="recipes">An array of recipes consisting of the ingredient IDs, the item output, and the amount of possible random extra output.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.CreateSimpleCraftPerformer(GadgetCore.Util.Tuple{System.Int32[],Item,System.Int32,System.Boolean}[])">
            <summary>
            Generates a standard SlotValidator/CraftValidator/CraftPerformer trio using a simple set of input IDs and an output Item
            </summary>
            <param name="recipes">An array of recipes consisting of the ingredient IDs, the item output, the amount of possible random extra output, and whether to randomize the rarity of the output item.</param>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.CreateAdvancedCraftPerformer(GadgetCore.API.CraftMenuInfo.AdvancedRecipe[])">
            <summary>
            Generates a standard SlotValidator/CraftValidator/CraftPerformer trio using a more advanced structure of recipe components.
            </summary>
            <param name="recipes">An array of recipes represented by <see cref="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipe"/>s.</param>
        </member>
        <member name="E:GadgetCore.API.CraftMenuInfo.OnCraftButton">
            <summary>
            Given the ID of the recipe being crafted, returns the progress to be added to the craft bar (from 1-100) in a click.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.SlotValidator">
            <summary>
            A delegate used for determining if an item is valid for a slot.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.CraftValidator">
            <summary>
            A delegate used for validating crafting recipes.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.CraftPerformer">
            <summary>
            A delegate used for performing crafting recipes.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.CraftFinalizer">
            <summary>
            A delegate used for finalizing crafting recipes.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipe">
            <summary>
            Represents a recipe provided to <see cref="M:GadgetCore.API.CraftMenuInfo.CreateAdvancedCraftPerformer(GadgetCore.API.CraftMenuInfo.AdvancedRecipe[])"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipe.Slots">
            <summary>
            Array of recipe components for this recipe. Will always be of length 4.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AdvancedRecipe.#ctor(GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent,GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent,GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent,GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipe"/> with the four specified slots. An unused slot can be null.
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent">
            <summary>
            Represents a component in a recipe provided to <see cref="M:GadgetCore.API.CraftMenuInfo.CreateAdvancedCraftPerformer(GadgetCore.API.CraftMenuInfo.AdvancedRecipe[])"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.UNUSED">
            <summary>
            Fill unused recipe slots with this.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.Type">
            <summary>
            The type of this advanced recipe component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.Item">
            <summary>
            The Item associated with this slot.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.Fuzzy">
            <summary>
            Whether or not the Item should be matched purely based on ID.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.QuantityVariation">
            <summary>
            The maximum amount by which the quantity of the associated Item may by randomly increased by.
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.#ctor(Item,GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType,System.Int32)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent.#ctor(Item,GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType,System.Boolean,System.Int32)">
            <summary>
            Constructs a new <see cref="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent"/>
            </summary>
        </member>
        <member name="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType">
            <summary>
            Represents the component type of an <see cref="T:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponent"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType.INPUT">
            <summary>
            Standard input component for a recipe.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType.CORE_INPUT">
            <summary>
            Core input component for a recipe - there can only be one component of this type.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType.OUTPUT">
            <summary>
            Standard output component for a recipe.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType.CORE_OUTPUT">
            <summary>
            Core output component for a recipe - inherits all properties other than ID and quantity from the core input component.
            </summary>
        </member>
        <member name="F:GadgetCore.API.CraftMenuInfo.AdvancedRecipeComponentType.UNUSED">
            <summary>
            A component representing an unused slot.
            </summary>
        </member>
        <member name="T:GadgetCore.API.EntityInfo">
            <summary>
            Defines a custom Entity. Make sure to call Register on it to register your Entity.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityInfo.Type">
            <summary>
            The EntityType of this Entity
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityInfo.Entity">
            <summary>
            The GameObject representing this Entity. This will be registered as a prefab, and as such should be a freshly constructed GameObject.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EntityInfo.ResourcePath">
            <summary>
            The string usable in <see cref="M:UnityEngine.Resources.Load(System.String)"/> to load this object.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityInfo.WorldIDs">
            <summary>
            The World IDs that this entity will spawn in. Note that the current version of Gadget Core does not actually use these values, although in the future these may be used for natural creature spawning depending on the Entity's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.#ctor(GadgetCore.API.EntityType,UnityEngine.GameObject,System.Int32[])">
            <summary>
            Use to create a new EntityInfo. Make sure to call Register on it to register your Entity. Note that the Entity object's name must not contain spaces.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this EntityInfo to the EntityRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.Spawn(UnityEngine.Vector3)">
            <summary>
            Spawns an instance of this Entity at the specified position. Override to add custom spawning behavior. Default implementation fails silently if the Entity has not been registered, or if the Entity GameObject is null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.EntityInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="T:GadgetCore.API.EntityRegistry">
            <summary>
            This registry is filled with EntityInfos, and is used for registering custom entities to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.EntityRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EntityRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.EntityRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="T:GadgetCore.API.EntityType">
            <summary>
            Specifies what type of entity this is. Note that despite these options, the current version of Gadget Core will never spawn the entity automatically.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityType.COMMON">
            <summary>
            This is a standard common enemy, or a passive creature.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityType.RARE">
            <summary>
            This is a rare enemy, such as a miniboss, that has a fair chance of not spawning at all on a given level.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityType.BOSS">
            <summary>
            This is a boss, that will never spawn naturally, and must be manually spawned.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityType.SPECIAL">
            <summary>
            This is not a boss, but will also never spawn naturally, and must be manually spawned.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EntityType.OTHER">
            <summary>
            This is some sort of entity that does not fall into any of the other catagories. It will never spawn naturally, and must be manually spawned.
            </summary>
        </member>
        <member name="T:GadgetCore.API.EquipStats">
            <summary>
            Represents a set of all six of the player stats, intended to be used for custom equipment.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EquipStats.NONE">
            <summary>
            EquipStats where all stats are 0.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EquipStats.ONE">
            <summary>
            EquipStats where all stats are 1.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.VIT">
            <summary>
            The VIT stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.STR">
            <summary>
            The STR stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.DEX">
            <summary>
            The DEX stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.TEC">
            <summary>
            The TEC stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.MAG">
            <summary>
            The MAG stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStats.FTH">
            <summary>
            The FTH stat.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.#ctor(GadgetCore.API.EquipStats)">
            <summary>
            Creates a new instance of EquipStats that has the same stats as the given EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Explicit(GadgetCore.API.EquipStatsDouble)~GadgetCore.API.EquipStats">
            <summary>
            Creates a new instance of EquipStats that has the same stats as the given EquipStatsDouble, with the values truncated to integers.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of EquipStats that has the specified stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.#ctor(System.Int32)">
            <summary>
            Creates a new instance of EquipStats where all stats are the given value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.#ctor(System.Int32[])">
            <summary>
            Creates a new instance of EquipStats from an array of stat values. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.GetStatArray">
            <summary>
            Returns the stats as an array of values. Will be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.GetByIndex(System.Int32)">
            <summary>
            Gets the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.SetByIndex(System.Int32,System.Int32)">
            <summary>
            Sets the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.AddByIndex(System.Int32,System.Int32)">
            <summary>
            Adds to the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.AddTo(System.Int32[])">
            <summary>
            Adds this EquipStat's values to the given stat value array. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.SubtractFrom(System.Int32[])">
            <summary>
            Subtracts this EquipStat's values from the given stat value array. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.Equals(System.Object)">
            <summary>
            Determines if this EquipStats and the given EquipStats have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.GetHashCode">
            <summary>
            Gets a hash code for this EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Equality(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Determines if the two given EquipStats have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Inequality(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Determines if the two given EquipStats do not have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Addition(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStats by adding together the values of two other EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Subtraction(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStats by subtracting the values of one EquipStats from another.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Multiply(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStats by multiplying together the values of two other EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Division(GadgetCore.API.EquipStats,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStats by diving the values of one EquipStats from another.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Addition(GadgetCore.API.EquipStats,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStats by adding together the values of an EquipStats and an EquipStatsDouble. Truncates excess double values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Subtraction(GadgetCore.API.EquipStats,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStats by subtracting the values of an EquipStatsDouble and an EquipStats. Truncates excess double values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Multiply(GadgetCore.API.EquipStats,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStats by multiplying together the values of an EquipStats and an EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Division(GadgetCore.API.EquipStats,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStats by diving the values of an EquipStatsDouble from an EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Addition(GadgetCore.API.EquipStats,System.Int32)">
            <summary>
            Creates a new EquipStats by adding a value to all stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Subtraction(GadgetCore.API.EquipStats,System.Int32)">
            <summary>
            Creates a new EquipStats by subtracting a value from all stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Multiply(GadgetCore.API.EquipStats,System.Double)">
            <summary>
            Creates a new EquipStats by multiplying all stats by a value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStats.op_Division(GadgetCore.API.EquipStats,System.Double)">
            <summary>
            Creates a new EquipStats by dividing all stats by a value.
            </summary>
        </member>
        <member name="T:GadgetCore.API.EquipStatsDouble">
            <summary>
            Represents a set of all six of the player stats, as double-precision floating-point values.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EquipStatsDouble.NONE">
            <summary>
            EquipStatsDouble where all stats are 0.
            </summary>
        </member>
        <member name="F:GadgetCore.API.EquipStatsDouble.ONE">
            <summary>
            EquipStatsDouble where all stats are 1.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.VIT">
            <summary>
            The VIT stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.STR">
            <summary>
            The STR stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.DEX">
            <summary>
            The DEX stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.TEC">
            <summary>
            The TEC stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.MAG">
            <summary>
            The MAG stat.
            </summary>
        </member>
        <member name="P:GadgetCore.API.EquipStatsDouble.FTH">
            <summary>
            The FTH stat.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.#ctor(GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new instance of EquipStatsDouble that has the same stats as the given EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Implicit(GadgetCore.API.EquipStats)~GadgetCore.API.EquipStatsDouble">
            <summary>
            Creates a new instance of EquipStatsDouble that has the same stats as the given EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of EquipStatsDouble that has the specified stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.#ctor(System.Double)">
            <summary>
            Creates a new instance of EquipStatsDouble where all stats are the given value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.#ctor(System.Int32[])">
            <summary>
            Creates a new instance of EquipStatsDouble from an array of stat values. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.#ctor(System.Double[])">
            <summary>
            Creates a new instance of EquipStatsDouble from an array of stat values. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.GetStatArray">
            <summary>
            Returns the stats as an array of values. Will be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.GetByIndex(System.Int32)">
            <summary>
            Gets the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.SetByIndex(System.Int32,System.Double)">
            <summary>
            Sets the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.AddByIndex(System.Int32,System.Double)">
            <summary>
            Adds to the stat with the specified index. 0 is VIT, 1 is STR, 2 is DEX, 3 is TEC, 4 is MAG, 5 is FTH.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.AddTo(System.Double[])">
            <summary>
            Adds this EquipStatsDouble's values to the given stat value array. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.SubtractFrom(System.Double[])">
            <summary>
            Subtracts this EquipStatsDouble's values from the given stat value array. The array must be of length 6.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.Equals(System.Object)">
            <summary>
            Determines if this EquipStatsDouble and the given EquipStatsDouble have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.GetHashCode">
            <summary>
            Gets a hash code for this EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Equality(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Determines if the two given EquipStatsDouble have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Inequality(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Determines if the two given EquipStatsDouble do not have the same stat values.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Addition(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStatsDouble by adding together the values of two other EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Subtraction(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStatsDouble by subtracting the values of one EquipStatsDouble from another.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Multiply(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStatsDouble by multiplying together the values of two other EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Division(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStatsDouble)">
            <summary>
            Creates a new EquipStatsDouble by diving the values of one EquipStatsDouble from another.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Addition(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStatsDouble by adding together the values of an EquipStatsDouble and an EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Subtraction(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStatsDouble by subtracting the values of an EquipStats from an EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Multiply(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStatsDouble by multiplying together an EquipStatsDouble and an EquipStats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Division(GadgetCore.API.EquipStatsDouble,GadgetCore.API.EquipStats)">
            <summary>
            Creates a new EquipStatsDouble by diving the values of an EquipStats from an EquipStatsDouble.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Addition(GadgetCore.API.EquipStatsDouble,System.Double)">
            <summary>
            Creates a new EquipStatsDouble by adding a value to all stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Subtraction(GadgetCore.API.EquipStatsDouble,System.Double)">
            <summary>
            Creates a new EquipStatsDouble by subtracting a value from all stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Multiply(GadgetCore.API.EquipStatsDouble,System.Double)">
            <summary>
            Creates a new EquipStatsDouble by multiplying all stats by a value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.EquipStatsDouble.op_Division(GadgetCore.API.EquipStatsDouble,System.Double)">
            <summary>
            Creates a new EquipStatsDouble by dividing all stats by a value.
            </summary>
        </member>
        <member name="T:GadgetCore.API.Gadget">
            <summary>
            At least one class in your mod must extend this for your mod to be identified by Gadget Core. Must also have the <see cref="T:GadgetCore.API.GadgetAttribute">Gadget</see> Attribute.
            May have multiple Gadgets in one mod - They will be able to be individually enabled or disabled in the ingame mod manager.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.Enabled">
            <summary>
            Represents whether this Gadget is enabled. Note that mods can be enabled and disabled in the mod menu.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.ModID">
            <summary>
            The Mod ID assigned to this mod. It represents the index of the mod in <see cref="T:GadgetCore.API.Gadgets"/>' list.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.Logger">
            <summary>
            The Logger used by this Gadget.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.Config">
            <summary>
            The config used by this Gadget. Can use to write to your own config.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.HarmonyInstance">
            <summary>
            The harmony instances used by this Gadget.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadget.Info">
            <summary>
            The reference to this Gadget's <see cref="T:GadgetCore.API.GadgetInfo"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.CreateRegistries">
            <summary>
            Override to add custom <see cref="T:GadgetCore.API.Registry"/>s to the game.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.ReloadConfig">
            <summary>
            Call to trigger a config reload. If this mod has <see cref="F:GadgetCore.API.GadgetAttribute.AllowConfigReloading"/> set to false, then this will throw an exception.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.LoadConfig">
            <summary>
            Called to load this gadget's config from the gadget's <see cref="P:GadgetCore.API.Gadget.Config"/> instance.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.PrePatch">
            <summary>
            Called during gadget initialization, before Harmony patches are applied.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.Initialize">
            <summary>
            Called during gadget initialization. All data registration should be done from this method.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.Unload">
            <summary>
            Called when this gadget is unloaded or reloaded. 
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.ScriptStart">
            <summary>
            Called when the gadget hook script starts.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.ScriptUpdate">
            <summary>
            Called when the gadget hook script has an update.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.ScriptFixedUpdate">
            <summary>
            Called when the gadget hook script has a fixed update.
            </summary>
        </member>
        <member name="E:GadgetCore.API.Gadget.OnLoad">
            <summary>
            Called after this Gadget is fully loaded and initialized.
            </summary>
        </member>
        <member name="E:GadgetCore.API.Gadget.OnUnload">
            <summary>
            Called before this Gadget is unloaded.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.GetModDescription">
            <summary>
            Returns the description of this Gadget. By default, returns null, which will cause the Gadget's ModInfo to be used as its description.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.GetPreviousModNames">
            <summary>
            Returns a list of all previous names this Gadget has had. If you must change the name of your Gadget, use this to prevent registry data corruption. Null is not a valid return value, return an empty array if your Gadget has had no previous names.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.GetModVersionString">
            <summary>
            Returns the version string of this Gadget. By default, returns the value of the AssemblyFileVersion attribute.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget.GetConfigMenu">
            <summary>
            Returns an <see cref="T:GadgetCore.API.ConfigMenu.IGadgetConfigMenu"/> for this Gadget. By default, returns a <see cref="T:GadgetCore.API.ConfigMenu.INIGadgetConfigMenu"/> for this Gadget's UMF config file. May return null if the Gadget should not have a config menu.
            </summary>
        </member>
        <member name="T:GadgetCore.API.Gadget`1">
            <summary>
            At least one class in your mod must extend this for your mod to be identified by Gadget Core. Must also have the <see cref="T:GadgetCore.API.GadgetAttribute">Gadget</see> Attribute.
            May have multiple Gadgets in one mod - They will be able to be individually enabled or disabled in the ingame mod manager.
            
            This self-referencing generic-form Gadget includes a "GetSingleton" method.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget`1.GetSingleton">
            <summary>
            Returns this <see cref="T:GadgetCore.API.Gadget`1"/>'s singleton.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadget`1.GetLogger">
            <summary>
            Returns this <see cref="T:GadgetCore.API.Gadget`1"/>'s logger.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetAttribute">
            <summary>
            Required by classes that extend Gadget. Provides information about your Gadget.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.Name">
            <summary>
            The friendly name of this Gadget. If you change this after your initial release, make sure to override GetPreviousModNames to prevent registry data corruption!
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.RequiredOnClients">
            <summary>
            Whether multiplayer clients attempting to connect without this Gadget should be rejected.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.EnableByDefault">
            <summary>
            Whether the Gadget should default to being enabled or not when first installed.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.LoadAfter">
            <summary>
            The list of any and all Gadgets that this Gadget should load after, regardless of <see cref="F:GadgetCore.API.GadgetAttribute.LoadPriority"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.LoadBefore">
            <summary>
            The list of any and all Gadgets that this Gadget should load before, regardless of <see cref="F:GadgetCore.API.GadgetAttribute.LoadPriority"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.LoadPriority">
            <summary>
            The priority for loading your Gadget. Higher number means the Gadget will be loaded earlier in the loading process.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.Dependencies">
            <summary>
            The names of any and all other Gadgets that your Gadget is dependent upon. If they are not present, your Gadget will not be loaded, and if your Gadget has the same load priority as them, your Gadget will be guaranteed to load after them. May or may not include version numbers.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.AllowRuntimeReloading">
            <summary>
            Indicates whether this Gadget can be reloaded at runtime. Gadget reloads will also cause the config to be reloaded. Defaults to true.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.AllowConfigReloading">
            <summary>
            Indicates whether this Gadget can have its config reloaded at runtime, without reloading the entire Gadget. Defaults to true.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.GadgetVersionSpecificity">
            <summary>
            The point at which a difference between the Gadget versions of the host and client should flag an incompatibility.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.GadgetCoreVersionSpecificity">
            <summary>
            The point at which a change to GadgetCore should flag this Gadget as incompatible.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetAttribute.TargetGCVersion">
            <summary>
            The version of GadgetCore your Gadget is made for.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.String[],System.String[],System.Int32,System.String[],System.Boolean,System.Boolean,GadgetCore.API.VersionSpecificity,GadgetCore.API.VersionSpecificity,System.String)">
            <summary>
            Required by classes that extend Gadget. Provides information about your Gadget.
            </summary>
            <param name="Name">The friendly name of this Gadget. Also used for registry names. Should not contain special characters.</param>
            <param name="RequiredOnClients">Whether multiplayer clients attempting to connect without this Gadget should be rejected.</param>
            <param name="EnableByDefault">Whether the Gadget should default to being enabled or not when first installed.</param>
            <param name="LoadAfter">The list of any and all Gadgets that this Gadget should load after, regardless of <paramref name="LoadPriority"></paramref></param>
            <param name="LoadBefore">The list of any and all Gadgets that this Gadget should load before, regardless of <paramref name="LoadPriority"></paramref></param>
            <param name="LoadPriority">The priority for loading your Gadget. Higher number means higher priority. Leave at 0 if you don't care.</param>
            <param name="Dependencies">The names of any and all other Gadgets that your Gadget is dependent upon. If they are not present, your Gadget will not be loaded, and if your Gadget has the same load priority as them, your Gadget will be guaranteed to load after them. May include version numbers with the syntax of \"ModName v1.0\". The level of precision used in the specified version number indicates the version specificity of the dependency.</param>
            <param name="AllowRuntimeReloading">Whether this Gadget can be reloaded at runtime. Gadget reloads will also cause the config to be reloaded. Defaults to true.</param>
            <param name="AllowConfigReloading">Whether this Gadget can have its config reloaded at runtime, without reloading the entire Gadget. Defaults to true.</param>
            <param name="GadgetVersionSpecificity">The point at which a difference between the mod versions of the host and client should flag an incompatibility.</param>
            <param name="GadgetCoreVersionSpecificity">The point at which a change to GadgetCore should flag this Gadget as incompatible.</param>
            <param name="TargetGCVersion">The version of GadgetCore your Gadget is made for. This is automatically assigned to the version of GadgetCore you are building with, so you should always leave this at default.</param>
        </member>
        <member name="T:GadgetCore.API.VersionSpecificity">
            <summary>
            Used to specify how specific a version number comparison should be.
            </summary>
        </member>
        <member name="F:GadgetCore.API.VersionSpecificity.MAJOR">
            <summary>
            Only compare against the major version number.
            </summary>
        </member>
        <member name="F:GadgetCore.API.VersionSpecificity.MINOR">
            <summary>
            Compare against the major and minor version numbers.
            </summary>
        </member>
        <member name="F:GadgetCore.API.VersionSpecificity.NONBREAKING">
            <summary>
            Compare against the major, minor, and nonbreaking version numbers.
            </summary>
        </member>
        <member name="F:GadgetCore.API.VersionSpecificity.BUGFIX">
            <summary>
            Compare against the major, minor, nonbreaking, and bugfix version numbers.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetConfig">
            <summary>
            Class for managing your mod's config.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetConfig.ConfigData">
            <summary>
            The KeyDataCollection for the section of the config file that this GadgetConfig uses.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetConfig.configFile">
            <summary>
            The path to the config file that this GadgetConfig uses.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetConfig.configSection">
            <summary>
            The section of the config file that this GadgetConfig uses.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new GadgetConfig for manipulating the given config file and section.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Load">
            <summary>
            Loads the current contents of the config file into this GadgetConfig instance. Destroys any changes to the data made before a call to <see cref="M:GadgetCore.API.GadgetConfig.Save"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Save">
            <summary>
            Saves the current config data as represented in this GadgetConfig instance to the config file. Destroys any changes to the file made before a call to <see cref="M:GadgetCore.API.GadgetConfig.Load"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Reset">
            <summary>
            Removes all values from the config section.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadInt(System.String,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String[])">
            <summary>
            Reads an <see cref="T:System.Int32"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadLong(System.String,System.Int64,System.Nullable{System.Int64},System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String[])">
            <summary>
            Reads a <see cref="T:System.Int64"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadFloat(System.String,System.Single,System.Nullable{System.Single},System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.String[])">
            <summary>
            Reads a <see cref="T:System.Single"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadDouble(System.String,System.Double,System.Nullable{System.Double},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},System.String[])">
            <summary>
            Reads a <see cref="T:System.Double"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadBool(System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String[])">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadString(System.String,System.String,System.String,System.Boolean,System.String[],System.String[])">
            <summary>
            Reads a <see cref="T:System.String"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadStringArray(System.String,System.String[],System.String[],System.Boolean,System.String[][],System.String[])">
            <summary>
            Reads a <see cref="T:System.String"/> array value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadKeyCode(System.String,UnityEngine.KeyCode,UnityEngine.KeyCode,System.Boolean,UnityEngine.KeyCode[],System.String[])">
            <summary>
            Reads a <see cref="T:UnityEngine.KeyCode"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.ReadEnum``1(System.String,``0,``0,System.Boolean,``0[],System.String[])">
            <summary>
            Reads an <see cref="T:System.Enum"/> value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Read``1(System.String,``0,``0,System.Boolean,``0[],``0[],System.String[])">
            <summary>
            Reads a generic value from the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Read``1(System.String,System.Func{System.String,``0},``0,``0,System.Boolean,``0[],``0[],System.String[])">
            <summary>
            Reads a generic value from the config using a specified type converter.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteInt(System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String[])">
            <summary>
            Writes an <see cref="T:System.Int32"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteLong(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String[])">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteFloat(System.String,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.String[])">
            <summary>
            Writes a <see cref="T:System.Single"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteDouble(System.String,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},System.String[])">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteBool(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.String[])">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteString(System.String,System.String,System.String,System.String,System.Boolean,System.String[],System.String[])">
            <summary>
            Writes a <see cref="T:System.String"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteStringArray(System.String,System.String[],System.String[],System.String[],System.Boolean,System.String[][],System.String[])">
            <summary>
            Writes a <see cref="T:System.String"/> array value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteKeyCode(System.String,UnityEngine.KeyCode,UnityEngine.KeyCode,UnityEngine.KeyCode,System.Boolean,UnityEngine.KeyCode[],System.String[])">
            <summary>
            Writes a <see cref="T:UnityEngine.KeyCode"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.WriteEnum``1(System.String,``0,``0,``0,System.Boolean,``0[],System.String[])">
            <summary>
            Writes an <see cref="T:System.Enum"/> value to the config.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetConfig.Write``1(System.String,``0,``0,``0,System.Boolean,``0[],``0[],System.String[])">
            <summary>
            Writes a generic value to the config.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetCoreAPI">
            <summary>
            General-purpose utility class for accessing various parts of the Gadget Core API
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetCoreAPI.RAW_VERSION">
            <summary>
            The version numbers for this version of Gadget Core. You generally shouldn't access this directly, instead use <see cref="M:GadgetCore.API.GadgetCoreAPI.GetRawVersion"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetCoreAPI.FULL_VERSION">
            <summary>
            A slightly more informative version. You generally shouldn't access this directly, instead use <see cref="M:GadgetCore.API.GadgetCoreAPI.GetFullVersion"/>
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetCoreAPI.IS_BETA">
            <summary>
            Indicates whether this version of GadgetCore is a beta version. You generally shouldn't access this directly, instead use <see cref="M:GadgetCore.API.GadgetCoreAPI.GetIsBeta"/>
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetCoreAPI.MissingTexSprite">
            <summary>
            The sprite used for missing tile textures
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetRawVersion">
            <summary>
            Returns the raw version of the running version of GadgetCore. Use this instead of directly accessing <see cref="F:GadgetCore.API.GadgetCoreAPI.RAW_VERSION"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetFullVersion">
            <summary>
            Returns the full version of the running version of GadgetCore. Use this instead of directly accessing <see cref="F:GadgetCore.API.GadgetCoreAPI.FULL_VERSION"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetIsBeta">
            <summary>
            Returns whether the running version of GadgetCore is a beta version. Use this instead of directly accessing <see cref="F:GadgetCore.API.GadgetCoreAPI.IS_BETA"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPlayerName">
            <summary>
            Gets the name of the current player, potentially including the numeric afix in the case of multiple players with the same name in a multiplayer game.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPlayerByName(System.String)">
            <summary>
            Returns the <see cref="T:PlayerScript"/> for the player with the given name. Returns null if no player with that name exists.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.FreezeInput(System.String)">
            <summary>
            Freezes keyboard input to GameScript.Update and PlayerScript.Update. Useful when presenting menus that have keyboard input.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DelayUnfreezeInput(System.String)">
            <summary>
            Unfreezes input on a one-frame delay.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.UnfreezeInput(System.String)">
            <summary>
            Unfreezes input as it was set for the given reason.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.IsInputFrozen">
            <summary>
            Indicates whether keyboard input was frozen through <see cref="M:GadgetCore.API.GadgetCoreAPI.FreezeInput(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.Quit">
            <summary>
            Quits the game. You should use this instead of <see cref="M:UnityEngine.Application.Quit"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.QuitAndUpdate">
            <summary>
            Quits the game, and launches an update using an already-downloaded "Gadget Core Installer.exe" file in the Tools directory.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetUMFAPI">
            <summary>
            Returns an interface that can be used for interfacing with UMF. Will return null if UMF is not installed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.RegisterKeyDownListener(UnityEngine.KeyCode,System.Action)">
            <summary>
            Registers the provided action so that it will be triggered when the provided key is pressed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.UnregisterKeyDownListener(UnityEngine.KeyCode,System.Action)">
            <summary>
            Unregisters the given key down listener for the given key.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.RegisterKeyUpListener(UnityEngine.KeyCode,System.Action)">
            <summary>
            Registers the provided action so that it will be triggered when the provided key is released.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.UnregisterKeyUpListener(UnityEngine.KeyCode,System.Action)">
            <summary>
            Unregisters the given key up listener for the given key.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CanItemsStack(Item,Item)">
            <summary>
            Determines if two <see cref="T:Item"/>s are able to stack together. Ignores matters of quantity.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.MatchItems(Item,Item)">
            <summary>
            Determines if <paramref name="item1"/> matches <paramref name="item2"/>.
            <paramref name="item1"/>'s exp must be greater than or equal to <paramref name="item2"/>'s exp, while quantity is ignored.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CreateMarketStand(GadgetCore.API.ItemInfo,UnityEngine.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a market stand. If called on the title screen, will return null but a stand will still be created upon ship load.
            </summary>
            <param name="item">The item to sell</param>
            <param name="pos">The position to put the stand at</param>
            <param name="cost">The cost to buy the item</param>
            <param name="isBuild">If true, costs scrap metal. If false, costs world frags.</param>
            <param name="isCredits">If isBuild and isCredits are true, costs credits instead of scrap metal.</param>
            <param name="isTrophies">If isBuild, isCredits, and isTrophies are true, costs wealth trophies instead of credits.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DisplayYesNoDialog(System.String,System.Action,System.Action)">
            <summary>
            Displays a dialog box with the button 'Yes' and 'No' on it. One of the provided actions will be executed once a choice is made.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DisplayOKCancelDialog(System.String,System.Action,System.Action)">
            <summary>
            Displays a dialog box with the button 'OK' and 'Cancel' on it. One of the provided actions will be executed once a choice is made.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DisplayInfoDialog(System.String)">
            <summary>
            Displays an information dialog box with just the button 'OK' on it.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CloseDialog">
            <summary>
            Closes the general-purpose dialog box, if it's open.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.EmptyItem">
            <summary>
            Creates an empty Item, used to represent the content of an empty slot.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CopyItem(Item)">
            <summary>
            Creates a copy of an Item, including its extra data.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CloneItem(Item)">
            <summary>
            Creates a copy of an Item, including its extra data.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.ConstructItemFromIntArray(System.Int32[])">
            <summary>
            The base game transmits Items across the network using int arrays. This method converts an int array into an Item, and restores the Item's extra data in the process. Indexes 0-10 of the array are used for vanilla data, while indexes 11 and up are used for any and all extra data, and are encoded in a format that is not meant to be manually read.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.ConstructItemFromIntArray(System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            The base game transmits Items across the network using int arrays. This method converts an int array into an Item, and restores the Item's extra data in the process. Indexes 0-10 of the array are used for vanilla data, while indexes 11 and up are used for any and all extra data, and are encoded in a format that is not meant to be manually read.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.ConstructIntArrayFromItem(Item)">
            <summary>
            The base game transmits Items across the network using int arrays. This method converts an Item into an int array, and preserves the Item's extra data in the process. Indexes 0-10 of the array are used for vanilla data, while indexes 11 and up are used for any and all extra data, and are encoded in a format that is not meant to be manually read.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.ConstructIntArrayFromItem(Item,System.Boolean,System.Boolean)">
            <summary>
            The base game transmits Items across the network using int arrays. This method converts an Item into an int array, and preserves the Item's extra data in the process. Indexes 0-10 of the array are used for vanilla data, while indexes 11 and up are used for any and all extra data, and are encoded in a format that is not meant to be manually read.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.EmptyEnumerator">
            <summary>
            Returns an IEnumerator that does nothing. Use when you need to return an IEnumerator, but you don't want it to do anything and you can't use null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.SpawnItem(UnityEngine.Vector3,Item,System.Boolean)">
            <summary>
            Use to spawn an item into the game world.
            You may notice that the vanilla game's source-code uses Resources.Load to spawn items. You should not use that.
            </summary>
            <param name="pos">The position to spawn the item at. Note that despite being a 2D game, Roguelands uses 3D space. That being said, the z-coordinate should nearly always be 0.</param>
            <param name="item">The item to spawn.</param>
            <param name="isChip">True to drop a chip instead of a normal item.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.SpawnItemLocal(UnityEngine.Vector3,Item,System.Boolean)">
            <summary>
            Use to spawn an item into the local player's world.
            You may notice that the vanilla game's source-code uses Resources.Load to spawn items. You should not use that.
            </summary>
            <param name="pos">The position to spawn the item at. Note that despite being a 2D game, Roguelands uses 3D space. That being said, the z-coordinate should nearly always be 0.</param>
            <param name="item">The item to spawn.</param>
            <param name="isChip">True to drop a chip instead of a normal item.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.SpawnExp(UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>
            Use to spawn exp into the world.
            You may notice that the vanilla game's source-code uses Resources.Load to spawn exp. You should not use that.
            </summary>
            <param name="pos">The position to spawn the item at. Note that despite being a 2D game, Roguelands uses 3D space. That being said, the z-coordinate should nearly always be 0.</param>
            <param name="exp">The amount of exp points to spawn.</param>
            <param name="delay">The optional amount of time to wait between spawning each exp orb.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DropItem(UnityEngine.Vector3,Item,System.Boolean)">
            <summary>
            Use to spawn an item into the game world as if dropped by this player.
            You may notice that the vanilla game's source-code uses Resources.Load to spawn items. You should not use that.
            </summary>
            <param name="pos">The position to spawn the item at. Note that despite being a 2D game, Roguelands uses 3D space. That being said, the z-coordinate should nearly always be 0.</param>
            <param name="item">The item to spawn.</param>
            <param name="isChip">True to drop a chip instead of a normal item.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.DropItemLocal(UnityEngine.Vector3,Item,System.Boolean)">
            <summary>
            Use to spawn an item into the game world as if dropped by this player, but only spawns it locally.
            You may notice that the vanilla game's source-code uses Resources.Load to spawn items. You should not use that.
            </summary>
            <param name="pos">The position to spawn the item at. Note that despite being a 2D game, Roguelands uses 3D space. That being said, the z-coordinate should nearly always be 0.</param>
            <param name="item">The item to spawn.</param>
            <param name="isChip">True to drop a chip instead of a normal item.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetCursorPos">
            <summary>
            Returns the position of the mouse cursor.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.RegisterCustomRPC(System.String,System.Action{System.Object[]})">
            <summary>
            Registers a custom RPC that can be later called using <see cref="M:GadgetCore.API.GadgetCoreAPI.CallCustomRPC(System.String,UnityEngine.RPCMode,System.Object[])"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CallCustomRPC(System.String,UnityEngine.RPCMode,System.Object[])">
            <summary>
            Calls a custom RPC that was previously registered with <see cref="M:GadgetCore.API.GadgetCoreAPI.RegisterCustomRPC(System.String,System.Action{System.Object[]})"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.CallCustomRPC(System.String,UnityEngine.NetworkPlayer,System.Object[])">
            <summary>
            Calls a custom RPC that was previously registered with <see cref="M:GadgetCore.API.GadgetCoreAPI.RegisterCustomRPC(System.String,System.Action{System.Object[]})"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.ReplaceMatResourceTex(System.String,UnityEngine.Texture2D)">
            <summary>
            Convenience method to override a Material resource's main texture. May only be called from the Initialize method of a Gadget.
            </summary>
            <param name="materialPath">The pseudo-file-path to the material to override.</param>
            <param name="tex">The new texture to use for the Material override.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddCustomResource(System.String,UnityEngine.Object)">
            <summary>
            Use to manually add new resources to the game, or overwrite existing ones. May only be called from the Initialize method of a Gadget.
            </summary>
            <param name="path">The pseudo-file-path to place the resource on.</param>
            <param name="resource">The resource to register.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddTextureToSheet(UnityEngine.Texture2D)">
            <summary>
            Use to register a texture for the tile spritesheet. The texture must be 32x32 in size. You probably shouldn't use this yourself - it is automatically called by <see cref="T:GadgetCore.API.TileInfo"/> after registration. May only be called from <see cref="M:GadgetCore.API.Gadget.Initialize"/>.
            </summary>
            <param name="sprite">The Texture2D to register to the spritesheet</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetItemName(System.Int32)">
            <summary>
            Gets the name of the item with the given ID. Works even on the title screen.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetItemDesc(System.Int32)">
            <summary>
            Gets the description of the item with the given ID. Easier than using reflection to call GetItemDesc on GameScript.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetChipName(System.Int32)">
            <summary>
            Gets the name of the chip with the given ID. Easier than using reflection to call GetChipName on GameScript.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetChipDesc(System.Int32)">
            <summary>
            Gets the description of the chip with the given ID. Easier than using reflection to call GetChipDesc on GameScript.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddEmblemRecipe(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a recipe to the Emblem Forge.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddPrismRecipe(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a recipe to the Prism Forge.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddGearForgeRecipe(GadgetCore.Util.Tuple{System.Int32,System.Int32,System.Int32},Item,System.Int32)">
            <summary>
            Adds a recipe to the Gear Forge.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddAlchemyStationRecipe(GadgetCore.Util.Tuple{System.Int32,System.Int32,System.Int32},Item,System.Int32)">
            <summary>
            Adds a recipe to the Alchemy Station.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddUltimateForgeRecipe(GadgetCore.Util.Tuple{System.Int32,System.Int32},System.Int32)">
            <summary>
            Adds a recipe to the Ultimate Forge.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.AddCreationMachineRecipe(System.Int32,Item,System.Int32)">
            <summary>
            Adds a recipe to the Creation Machine.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetRandomCraftTier">
            <summary>
            Generates a random gear item tier, factoring in the forgeblade and blacksmith uniform.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetInventory">
            <summary>
            Returns a reference to the inventory field in <see cref="T:GameScript"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPortalUses">
            <summary>
            Returns a reference to the portalUses field in <see cref="T:GameScript"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetGearLevel(Item)">
            <summary>
            Gets the level of the given piece of gear.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetGearLevel(System.Int32,System.Int32)">
            <summary>
            Gets the resultant level from a given amount of gear exp.
            If <paramref name="cap"/> is negative, then no cap will be used.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetGearExp(System.Int32)">
            <summary>
            Gets the total required gear exp for a given level.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPlayerExp(System.Int32)">
            <summary>
            Gets the total required player exp for a given level.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTrueGearBaseStats(System.Int32)">
            <summary>
            Gets the true EquipStats of the item with the given ID, before any stat modifiers at all are applied.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetGearBaseStats(Item)">
            <summary>
            Gets the EquipStats of the given item. Applies 'Base' stat modifiers to the stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetGearStats(Item)">
            <summary>
            Gets the EquipStats of the given item. This accounts for all factors that effect the item's stats.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.RegisterStatModifier(GadgetCore.API.GadgetCoreAPI.StatModifier,GadgetCore.API.StatModifierType)">
            <summary>
            Registers an gear stats modifier. Can be used to change how one or more pieces of gear's stats are calculated.
            </summary>
            <param name="modifier"></param>
            <param name="type"></param>
        </member>
        <member name="T:GadgetCore.API.GadgetCoreAPI.StatModifier">
            <summary>
            Delegate used for stat modifiers.
            </summary>
            <param name="item">The item who's stats are being modified.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GeneratePlaneMesh(System.Single,System.Single)">
            <summary>
            Generates a plane-shaped mesh, with a specified width and height.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.IsResourceRegistered(System.String)">
            <summary>
            Use to check if there is a resource registered at the specified path. This includes resources registered by the base game.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.IsCustomResourceRegistered(System.String)">
            <summary>
            Use to check if there is a custom resource registered at the specified path. This does not include resources registered by the base game.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetCustomResource(System.String)">
            <summary>
            Gets the custom resource at the specified path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetResource(System.String)">
            <summary>
            Gets the resource at the specified path. This can retrieve vanilla or custom resources.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetItemMaterial(System.Int32)">
            <summary>
            Gets the item material with the specified ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTileMaterial(System.Int32)">
            <summary>
            Gets the tile material with the specified ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetChipMaterial(System.Int32)">
            <summary>
            Gets the chip material with the specified ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetWeaponMaterial(System.Int32)">
            <summary>
            Gets the weapon material with the specified ID. Used for when the weapon is equipped.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetOffhandMaterial(System.Int32)">
            <summary>
            Gets the offhand material with the specified ID. Used for when the offhand item is equipped.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetHeadMaterial(System.Int32)">
            <summary>
            Gets the head material with the specified ID. Used for when a helmet is equipped.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetBodyMaterial(System.Int32)">
            <summary>
            Gets the body material with the specified ID. Used for when an armor is equipped, or for the worn outfit if no armor is equipped.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetArmMaterial(System.Int32)">
            <summary>
            Gets the arm material with the specified ID. Used for when an armor is equipped, or for the worn outfit if no armor is equipped.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetDroidHeadMaterial(System.Int32)">
            <summary>
            Gets the droid head material with the specified ID. Used for the head of a droid, which is animated seperately from the body.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetDroidBodyMaterial(System.Int32)">
            <summary>
            Gets the droid body material with the specified ID. Used for the body of a droid, which is animated seperately from the head.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetRaceMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the race head material with the specified ID and variant. Used for when no helmet is worn.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetSignMaterial(System.Int32)">
            <summary>
            Gets the world sign material with the specified world ID. This is the colored bar that is shown inside of portals.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTerrainSideMaterial(System.Int32,System.Boolean)">
            <summary>
            Gets the terrain side material with the specified world ID. This is used to fill in each side of a chunk that doesn't lead anywhere.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTerrainZoneMaterial(System.Int32)">
            <summary>
            Gets the terrain zone material with the specified world ID. This represents the four L-shaped corners of a terrain chunk. Does not include the sides, or the mid-chunk.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTerrainEntranceMaterial(System.Int32)">
            <summary>
            Gets the terrain entrance material with the specified world ID. This is the entrance room of a world. It is flipped and re-used for the exit as well.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetTerrainMidChunkMaterial(System.Int32,System.Boolean)">
            <summary>
            Gets the terrain mid-chunk material with the specified world ID. This is the chunk of terrain in the middle of a room. Has a variant with an opening in the middle, and one without.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetWorldBackgroundMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the world background material with the specified world ID and depth index. There are four of these for each world, and they are used to draw the world's background. The depth index goes from 0 to 3 - a higher index indicates farther back into the background, and generally means a darker-colored material.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetWorldParallaxMaterial(System.Int32)">
            <summary>
            Gets the world parallax material with the specified world ID. This is a vertical color gradient used to create the background parallax effect.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetFactionFlagMaterial(System.Int32)">
            <summary>
            Gets the faction flag material with the specified ID. This refers to the allegiance icon shown in the character creation screen. In vanilla, it is either The Galactic Fleet, the Starlight Rebellion, the Church of Faust, or the Gray Enigma. There are two additional unused flags with the IDs of 4 and 5: 4 is for the Junkbelt Mercenaries, and 5 is for the Droidtech Enterprise.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetDifficultyFlagMaterial(System.Int32)">
            <summary>
            Gets the difficulty flag material with the specified ID. This refers to the difficulty icon shown in the character creation screen. In vanilla, it is either Standard or Ironman. For some reason, IDs 2 through 5 are also used by the vanilla game, and are copies of the 'Standard' flag. (ID 0)
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetChatPortraitMaterial(System.Int32)">
            <summary>
            Gets the chat portrait material with the specified ID. This is the character portrait shown when in dialog with an NPC, and the ID is not necessarily related to the NPC being spoken to in any way, although NPCs added with Gadget Core will have the same portrait ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetMiscellaneousMaterial(System.String)">
            <summary>
            Gets the miscellaneous material with the specified name. This is used for any material that does not fit into another catagory. In vanilla, this includes menus and UI elements, opened chests, and the planet icons as shown in the planet selector, among other things.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPropResource(System.Int32)">
            <summary>
            Gets the prop with the specified ID. A Prop is the in-world object representing any ship tile that has custom behavior. In the vanilla game, this is the engine blocks, the lamp blocks, and the spawner block, as well as all of the cards and badges. Keep in mind that interactable objects have their props saved as NPCs, for whatever reason.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetEntityResource(System.String)">
            <summary>
            Gets the entity with the specified name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetProjectileResource(System.String)">
            <summary>
            Gets the projectile with the specified name. Note that this does not include weapon projectiles.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetSpecialProjectileResource(System.String)">
            <summary>
            Gets the special projectile with the specified name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetWeaponProjectileResource(System.Int32)">
            <summary>
            Gets the weapon projectile with the specified ID. These refer specifically to projectiles fired by the player's weapon, and the ID is that weapon's ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetHazardResource(System.String)">
            <summary>
            Gets the hazard with the specified name. Note that some enemy projectiles are actually hazards, such as the blade-like projectiles summoned by a few different enemies.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetObjectResource(System.String)">
            <summary>
            Gets the object with the specified name. These are the objects found within worlds and towns, meaning anything other than entities and objectives. Objectives are unique, and can be loaded with Resources.Load("objective/objective1")
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetNPCResource(System.String)">
            <summary>
            Gets the npc with the specified name. Note that this also includes interactable structures, but not the ones that can be picked up and placed in your ship.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetPlaceableNPCResource(System.Int32)">
            <summary>
            Gets the placeable npc with the specified ID. Note that this refers to interactable structures that can be picked up and placed in your ship.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetSound(System.String)">
            <summary>
            Gets the audio clip with the specified name. Note that the sounds made by weapons should be accessed using GetItemAudioClip
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.GetAttackSound(System.Int32)">
            <summary>
            Gets the attack audio clip with the specified ID. This is the sound played when a weapon is used.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadTexture2D(System.String)">
            <summary>
            Loads an image file from your Assets folder as a Texture2D. Assumes a file extension of .png if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAudioClip(System.String)">
            <summary>
            Loads an audio file from your Assets folder as an AudioClip. Assumes a file extension of .wav if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadObjMesh(System.String)">
            <summary>
            Loads an obj-format mesh from your Assets folder as a Mesh. Assumes a file extension of .obj if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAssetBundle(System.String)">
            <summary>
            Loads an AssetBundle from your Assets folder. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadTexture2D(System.String,System.Boolean)">
            <summary>
            Obsolete: Use <see cref="M:GadgetCore.API.GadgetCoreAPI.LoadTexture2D(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAudioClip(System.String,System.Boolean)">
            <summary>
            Obsolete: Use <see cref="M:GadgetCore.API.GadgetCoreAPI.LoadAudioClip(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadObjMesh(System.String,System.Boolean)">
            <summary>
            Obsolete: Use <see cref="M:GadgetCore.API.GadgetCoreAPI.LoadObjMesh(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAssetBundle(System.String,System.Boolean)">
            <summary>
            Obsolete: Use <see cref="M:GadgetCore.API.GadgetCoreAPI.LoadAssetBundle(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadTexture2DInternal(System.String,GadgetCore.Loader.GadgetMod)">
            <summary>
            Loads an image file from your Assets folder as a Texture2D. Assumes a file extension of .png if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAudioClipInternal(System.String,GadgetCore.Loader.GadgetMod)">
            <summary>
            Loads an audio file from your Assets folder as an AudioClip. Assumes a file extension of .wav if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadObjMeshInternal(System.String,GadgetCore.Loader.GadgetMod)">
            <summary>
            Loads an obj-format mesh from your Assets folder as a Mesh. Assumes a file extension of .obj if one is not specified. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.LoadAssetBundleInternal(System.String,GadgetCore.Loader.GadgetMod)">
            <summary>
            Loads an AssetBundle from your Assets folder. Returns null if no file with the given name was found.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetCoreAPI.SpriteSheetEntry">
            <summary>
            This represents an entry in the tile spritesheet. Returned by <see cref="M:GadgetCore.API.GadgetCoreAPI.AddTextureToSheet(UnityEngine.Texture2D)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.SpriteSheetEntry.GetTex">
            <summary>
            Returns the Texture that this SpriteSheetEntry was built from.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetCoreAPI.SpriteSheetEntry.GetCoords">
            <summary>
            Returns the coordinates on the spritesheet that this texture resides at. This will throw an exception if the spritesheet has not been generated yet.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetInfo">
            <summary>
            This is a container for a Gadget used for tracking various pieces of information about it.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetInfo.Gadget">
            <summary>
            The Gadget that this GadgetInfo describes.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetInfo.Attribute">
            <summary>
            The <see cref="T:GadgetCore.API.GadgetAttribute"/> for this Gadget.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetInfo.Mod">
            <summary>
            The GadgetMod that contains this Gadget. Will be null if this Gadget is in a UMF mod.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetInfo.ModName">
            <summary>
            The name of the mod that contains this Gadget.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetInfo.Dependencies">
            <summary>
            References to all of this Gadget's dependencies.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetInfo.Dependents">
            <summary>
            References to all Gadgets that are dependent on this Gadget.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetInfo.CalculateLoadTree(GadgetCore.Util.MultiTreeList{GadgetCore.API.GadgetInfo})">
            <summary>
            Calculates the load-order tree for Gadgets related to this one by their LoadBefore and LoadAfter attributes.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetInfo.ToString">
            <summary>
            Converts this <see cref="T:GadgetCore.API.GadgetInfo"/> into a human-readable string representation
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetNetwork">
            <summary>
            Provides methods related to network communication
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetNetwork.MatrixTimeout">
            <summary>
            How long the Gadget Network will wait for the Network ID Conversion Matrix to be created. If it has not been created after this timeout, the Gadget Network will assume you are connected to a vanilla player.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetNetwork.MatrixReady">
            <summary>
            True if the Network ID Conversion Matrix is ready for use. False otherwise. ID conversion methods will fail if the matrix is not ready.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetNetwork.IsHostVanilla">
            <summary>
            True if you are currently connected as a client, and the host does not have Gadget Core installed. This can be a false positive, in the case of a slow connection.
            </summary>
        </member>
        <member name="P:GadgetCore.API.GadgetNetwork.ServerPlayerName">
            <summary>
            The name of the server host's player
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetTimeSinceConnect">
            <summary>
            Gets the amount of time, in seconds, that has passed since the Network connection was established. Returns -1 if there is no currently active Network connection.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.HostHasReg(GadgetCore.API.Registry)">
            <summary>
            Checks if the network host has the specified registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetHostID``2(GadgetCore.API.RegistryEntry{``0,``1})">
            <summary>
            Gets the ID of this ItemInfo on the multiplayer host, saves the trouble of calling <see cref="M:GadgetCore.API.GadgetNetwork.ConvertIDToHost(GadgetCore.API.Registry,System.Int32)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToHost(GadgetCore.API.Registry,System.Object@)">
            <summary>
            Gets the host ID that matches the specified local ID. The given ID MUST be an int. Returns -1 if the host does not have a matching ID for the specified local ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToHost(GadgetCore.API.Registry,System.Int32@)">
            <summary>
            Gets the host ID that matches the specified local ID. Returns -1 if the host does not have a matching ID for the specified local ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToHost(GadgetCore.API.Registry,System.Int32)">
            <summary>
            Gets the host ID that matches the specified local ID. Returns -1 if the host does not have a matching ID for the specified local ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToLocal(GadgetCore.API.Registry,System.Object@)">
            <summary>
            Gets the local ID that matches the specified host ID. The given ID must be an int. Returns -1 if there is no matching local ID for the specified host ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToLocal(GadgetCore.API.Registry,System.Int32@)">
            <summary>
            Gets the local ID that matches the specified host ID. Returns -1 if there is no matching local ID for the specified host ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.ConvertIDToLocal(GadgetCore.API.Registry,System.Int32)">
            <summary>
            Gets the local ID that matches the specified host ID. Returns -1 if there is no matching local ID for the specified host ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetNameByNetworkPlayer(UnityEngine.NetworkPlayer)">
            <summary>
            Returns the player name of the given <see cref="T:UnityEngine.NetworkPlayer"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetNetworkPlayerByName(System.String)">
            <summary>
            Returns the <see cref="T:UnityEngine.NetworkPlayer"/> with the given player name
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.RegisterSyncVar``1(System.String,``0)">
            <summary>
            Registers a new SyncVar. The value of this SyncVar can be updated using <see cref="M:GadgetCore.API.GadgetNetwork.UpdateSyncVar``1(System.String,``0)"/>,
            and retrieved using <see cref="M:GadgetCore.API.GadgetNetwork.GetSyncVar``1(System.String)"/>. This value will always be synced across all clients.
            Must be called in the Initialize method of a Gadget.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.RegisterLocalSyncVar``1(System.String,``0)">
            <summary>
            Registers a new local SyncVar. The value of this SyncVar can be updated using <see cref="M:GadgetCore.API.GadgetNetwork.UpdateLocalSyncVar``1(System.String,``0)"/>,
            and retrieved using <see cref="M:GadgetCore.API.GadgetNetwork.GetLocalSyncVar``1(System.String,System.String)"/>. This value will always be synced across all clients.
            Each client has their own value for this SyncVar, but any client can retrieve any other client's value.
            Must be called in the Initialize method of a Gadget.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.UpdateSyncVar``1(System.String,``0)">
            <summary>
            Updates the value of a SyncVar. The new value will be synced across all clients. May only be used by the server.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.UpdateLocalSyncVar``1(System.String,``0)">
            <summary>
            Updates the value of a local SyncVar. The new value will be synced across all clients.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetSyncVar``1(System.String)">
            <summary>
            Gets the value of a SyncVar.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetLocalSyncVar``1(System.String,UnityEngine.NetworkPlayer)">
            <summary>
            Gets the value of a local SyncVar, for a given player.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetNetwork.GetLocalSyncVar``1(System.String,System.String)">
            <summary>
            Gets the value of a local SyncVar, for a given player.
            </summary>
        </member>
        <member name="E:GadgetCore.API.GadgetNetwork.OnMatrixReady">
            <summary>
            Invoked once the ID Conversion Matrix is ready for use. Bool parameter is true if the host has GadgetCore installed.
            Warning: In cases of high latency, this event may be invoked twice. The first time with a false parameter suggesting the host is vanilla,
            the second time with a true parameter once the modded Matrix connection is initialized. As such, you most likely only want to utilize
            this event when the parameter is true.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetPaths">
            <summary>
            Provides file paths to various commonly used directories.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.GamePath">
            <summary>
            The path to Roguelands' root directory, AKA the Roguelands folder.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.DataPath">
            <summary>
            The path to the data directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.ManagedPath">
            <summary>
            The path to the managed assemblies directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.GadgetCorePath">
            <summary>
            The path to the GadgetCore directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.ModsPath">
            <summary>
            The path to the Mods directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.ConfigsPath">
            <summary>
            The path to the Configs directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.LogsPath">
            <summary>
            The path to the Logs directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.LogArchivesPath">
            <summary>
            The path to the Log Archives directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.AssetsPath">
            <summary>
            The path to the Assets directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.LibsPath">
            <summary>
            The path to the Libs directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.ToolsPath">
            <summary>
            The path to the Tools directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.TempPath">
            <summary>
            The path to the Temp directory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.GadgetPaths.SaveBackupsPath">
            <summary>
            The path to the Save Backups directory.
            </summary>
        </member>
        <member name="T:GadgetCore.API.Gadgets">
            <summary>
            This class is responsible for managing Gadgets.
            </summary>
        </member>
        <member name="P:GadgetCore.API.Gadgets.LoadOrderTree">
            <summary>
            A <see cref="T:GadgetCore.Util.MultiTreeList`1"/> representing the relationships between the installed Gadgets. It is read-only, so do not attempt to edit it. Note that this is just the parent of the structure, and its <see cref="F:GadgetCore.Util.MultiTreeList`1.Value"/> is null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.CountGadgets">
            <summary>
            Returns the count of Gadgets. Note that this includes Gadgets that are not enabled.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.CountEnabledGadgets">
            <summary>
            Returns the count of Gadgets that are enabled.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.ListAllGadgets">
            <summary>
            Returns an array of all Gadgets. Note that this includes Gadgets that are not enabled.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.ListAllEnabledGadgets">
            <summary>
            Returns an array of all enabled Gadgets.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.ListAllGadgetInfos">
            <summary>
            Returns an array of all GadgetInfos. Note that this includes Gadgets that are not enabled.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.ListAllEnabledGadgetInfos">
            <summary>
            Returns an array of all enabled GadgetInfos.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.GetGadget(System.String)">
            <summary>
            Gets the Gadget with the specified name. If it is not found, attempts to find a Gadget that has the given name listed as a previous name. If still no Gadget is found, returns null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.GetGadget(System.Int32)">
            <summary>
            Gets the Gadget with the specified index. The Gadgets are sorted by load order.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.GetGadgetInfo(System.String)">
            <summary>
            Gets the GadgetInfo with the specified name. If it is not found, attempts to find a Gadget that has the given name listed as a previous name. If still no Gadget is found, returns null.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.GetGadgetInfo(System.Int32)">
            <summary>
            Gets the Gadget with the specified index. The Gadgets are sorted by load order.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.ReloadGadget(GadgetCore.API.GadgetInfo)">
            <summary>
            Reloads the given Gadget.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.SetEnabled(GadgetCore.API.GadgetInfo,System.Boolean)">
            <summary>
            Sets the Enabled status of the given gadget. Note that this can be queried using Gadget.Enabled.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.SetEnabled(System.String,System.Boolean)">
            <summary>
            Sets the Enabled status of the gadget with the given name using <see cref="M:GadgetCore.API.Gadgets.GetGadgetInfo(System.String)"/>. Will throw a NullReferenceException if there is no mod with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Gadgets.SetEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets the Enabled status of the gadget with the given index.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GadgetUtils">
            <summary>
            Some general-purpose utility methods.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetUtils.WaitAndInvoke(System.Reflection.MethodBase,System.Single,System.Func{System.Boolean},System.Object,System.Object[])">
            <summary>
            WaitAndInvoke is a coroutine that will wait for the specified timeout or condition, and then invoke the given method.
            </summary>
            <param name="method">The MethodBase to invoke.</param>
            <param name="timeout">The maximum time, in seconds, to wait.</param>
            <param name="condition">The condition on which to stop waiting early.</param>
            <param name="invokeInstance">The object to invoke the method on. May be null if the given method is static.</param>
            <param name="parameters">The parameters to pass to the invoked method.</param>
        </member>
        <member name="M:GadgetCore.API.GadgetUtils.SafeCopyTexture(UnityEngine.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes Graphics.CopyTexture on supported systems, otherwise performs the operation using direct pixel manipulation.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GadgetUtils.WildcardMatch(System.String,System.String)">
            <summary>
            Uses a recursive algorithm to check if a string matches a given wild
            </summary>
            <param name="text"></param>
            <param name="wild"></param>
            <returns></returns>
        </member>
        <member name="M:GadgetCore.API.GadgetUtils.RecursivelyDeleteDirectory(System.String,System.Boolean)">
            <summary>
            Recursively deletes a given directory and its subdirectories. If deleteFiles is false, silently ignores directories containing files.
            </summary>
        </member>
        <member name="T:GadgetCore.API.GameRegistry">
            <summary>
            The master registry of all other registries.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GameRegistry.GetRegistry(System.Type)">
            <summary>
            Gets the registry with the specified entry type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GameRegistry.GetRegistry(System.String)">
            <summary>
            Gets the registry with the specified name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GameRegistry.IsRegistryRegistered(System.Type)">
            <summary>
            Checks if a registry with the specified entry type is registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GameRegistry.IsRegistryRegistered(System.String)">
            <summary>
            Checks if a registry with the specified name is registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.GameRegistry.ListAllRegistries">
            <summary>
            Lists all registries.
            </summary>
        </member>
        <member name="T:GadgetCore.API.HarmonyGadgetAttribute">
            <summary>
            Indicates what Gadget owns this patch. Required for the use of GadgetCore's automatic Harmony patching.
            </summary>
        </member>
        <member name="F:GadgetCore.API.HarmonyGadgetAttribute.Gadget">
            <summary>
            The name of the <see cref="T:GadgetCore.API.Gadget"/> that owns this patch.
            </summary>
        </member>
        <member name="F:GadgetCore.API.HarmonyGadgetAttribute.RequiredGadgets">
            <summary>
            Other <see cref="T:GadgetCore.API.Gadget"/>s that must be present for this patch to run.
            </summary>
        </member>
        <member name="M:GadgetCore.API.HarmonyGadgetAttribute.#ctor(System.String)">
            <summary>
            Indicates what Gadget owns this patch. Required for use of GadgetCore's automatic Harmony patching.
            </summary>
            <param name="Gadget">The name of the <see cref="T:GadgetCore.API.Gadget"/> that owns this patch.</param>
        </member>
        <member name="M:GadgetCore.API.HarmonyGadgetAttribute.#ctor(System.String,System.String[])">
            <summary>
            Indicates what Gadget owns this patch. Required for use of GadgetCore's automatic Harmony patching.
            </summary>
            <param name="Gadget">The name of the <see cref="T:GadgetCore.API.Gadget"/> that owns this patch.</param>
            <param name="RequiredGadgets">Other <see cref="T:GadgetCore.API.Gadget"/>s that must be present for this patch to run.</param>
        </member>
        <member name="T:GadgetCore.API.InstanceTracker">
            <summary>
            Provides access to instances of some commonly used scripts. Be wary of using these during scene load, as it may take a moment for their values to get set.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.MainCamera">
            <summary>
            The Main Camera.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.GameScript">
            <summary>
            The GameScript. Only valid when in scene 1.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.PlayerScript">
            <summary>
            The PlayerScript. Note that there may be multiple PlayerScripts at one time in multiplayer, but this one is for your own player. Only valid when in scene 1.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.MenuScript">
            <summary>
            The MenuScript. Note that this is used for the in-game pause menu, and the singleplayer/multiplayer choice. Only valid when in scene 1.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.Menuu">
            <summary>
            The Menuu. Note that this is used for everything on the title screen. Only valid when in scene 0.
            </summary>
        </member>
        <member name="P:GadgetCore.API.InstanceTracker.MusicBox">
            <summary>
            The MusicBox. This is used to control what music is playing.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ItemExtension">
            <summary>
            Extends the Item class to add additional data to it.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.HasAnyExtraData(Item)">
            <summary>
            Returns true of the Item has any extra data at all.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.HasExtraData(Item,System.String)">
            <summary>
            Returns true of the Item has extra data with the specified key.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.PutExtraData``1(Item,System.String,``0)">
            <summary>
            Adds or replaces a piece of extra data to this Item. The data key should be of the format ModName:Key, and the data value must be a serializable type. If adding an ID as extra data, make sure to use GadgetNetwork.ConvertIDToHost on it first.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.GetExtraData``1(Item,System.String)">
            <summary>
            Gets a piece of extra data from this Item. If retrieving an ID as extra data, make sure to use GadgetNetwork.ConvertIDToLocal on it first.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.GetAllExtraData(Item)">
            <summary>
            Returns all extra data stored on this Item. Returns null if the item has no extra data.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.RemoveExtraData(Item,System.String)">
            <summary>
            Removes a piece of extra data from this Item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.RemoveAllExtraData(Item)">
            <summary>
            Removes any and all extra data from this Item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.SetAllExtraData(Item,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets the extra data dictionary for this item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.SerializeExtraData(Item)">
            <summary>
            Serializes all of the extra data on an Item, for transmission across the Network, or saving into PlayerPrefs.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemExtension.DeserializeExtraData(Item,System.String)">
            <summary>
            Deserializes the given extra data, and associates it with the Item. Replaces any extra data the Item may already have.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ItemInfo">
            <summary>
            Defines a custom Item. Make sure to call Register on it to register your Item.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemInfo.Type">
            <summary>
            The ItemType of this Item
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemInfo.Name">
            <summary>
            The name of this Item
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemInfo.Desc">
            <summary>
            The description of this Item
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemInfo.Stats">
            <summary>
            This EquipStats of this Item
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.Value">
            <summary>
            The sell-value of this Item. Represents the amount of credits given when taken to the item trasher.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.Tile">
            <summary>
            The TileInfo that this item can place. Use this ItemInfo in the TileInfo's constructor to ensure it is registered correctly.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.Tex">
            <summary>
            The Texture associated with this Item. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.HeldTex">
            <summary>
            The Texture associated with this item when it is held in the main- or off-hand. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.HeadTex">
            <summary>
            The Texture associated with this item when it is worn as a helmet, or the Texture used by this droid's head. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.BodyTex">
            <summary>
            The Texture associated with this item when it is worn as an armor, or the Texture used by this droid's body. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.ArmTex">
            <summary>
            The Texture associated with this item when it is worn as an armor; this texture is used for the player's arms. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.Mat">
            <summary>
            The Material associated with this item. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.HeldMat">
            <summary>
            The Material associated with this item when it is held in the main- or off-hand. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.HeadMat">
            <summary>
            The Material associated with this item when it is worn as a helmet, or the Texture used by this droid's head. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.BodyMat">
            <summary>
            The Material associated with this item when it is worn as an armor, or the Texture used by this droid's body. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.ArmMat">
            <summary>
            The Material associated with this item when it is worn as an armor; this texture is used for the player's arms. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.ProjectileID">
            <summary>
            The ID of the projectile fired by this weapon (if applicable).
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.WeaponScaling">
            <summary>
            An array of multipliers used for weapon scaling. May be null if this item is not a weapon.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.AttackSound">
            <summary>
            The sound that is played when the player attacks with this weapon.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.CritChanceBonus">
            <summary>
            A bonus % to crit chance for this weapon.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ItemInfo.CritPowerBonus">
            <summary>
            A bonus crit damage multiplier that is added to the base 1.5x crit power for this weapon.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.#ctor(GadgetCore.API.ItemType,System.String,System.String,UnityEngine.Texture,System.Int32,GadgetCore.API.EquipStats,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Use to create a new ItemInfo. Make sure to call Register on it to register your Item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.#ctor(GadgetCore.API.ItemType,System.String,System.String,UnityEngine.Material,System.Int32,GadgetCore.API.EquipStats,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Use to create a new ItemInfo. Make sure to call Register on it to register your Item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.SetWeaponInfo(System.Single[],UnityEngine.AudioClip,System.Single,System.Single,System.Int32)">
            <summary>
            Sets the special info unique to weapons. This must be called before Register. If this is item is a weapon and you are using one of the provided OnAttack routines, you must call this.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.Register(System.Int32,System.Boolean)">
            <summary>
            Registers this ItemInfo to the ItemRegistry.
            </summary>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this ItemInfo to the ItemRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.SetTile(GadgetCore.API.TileInfo)">
            <summary>
            Sets the tile placed by this item. You should probably not use this yourself, rather, you should put this ItemInfo into a TileInfo's constructor.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetDamage(PlayerScript)">
            <summary>
            Gets the amount of damage that this item will do. Returns 0 if WeaponScaling is null. Does not account for a crit. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.MultiplyCrit(PlayerScript,System.Int32)">
            <summary>
            Gets the amount of damage that this item will do on a crit. Returns 0 if WeaponScaling is null. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.TryCrit(PlayerScript)">
            <summary>
            Mathematically attempts to trigger a critical attack. Returns true if a crit should occur.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetValue">
            <summary>
            Gets the item's sell value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetName">
            <summary>
            Gets the item's name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetDesc">
            <summary>
            Gets the item's description.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetTier(Item)">
            <summary>
            Gets the item's tier. Returns -1 if the item does not have a tier.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetTierDigit(Item)">
            <summary>
            Returns the single digit representative of the item's tier. 1-9 represents tiers 1-9, 0 represents tier 10. Returns -1 if the item does not have a tier.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.ItemInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.ReadyToRegister">
            <summary>
            Returns true if this ItemInfo is ready to be registered. Returns false if it has already been registered, or if it is a weapon and SetWeaponInfo has not been called.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ItemInfo.OnUse">
            <summary>
            This event is invoked whenever the player uses the item while it is in the hotbar. Not to be confused with when a weapon is equipped and the player attacks with it. The inventory slot of the item is passed as the parameter. Return false to prevent the item from being used.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ItemInfo.OnUseFinal">
            <summary>
            This event is invoked whenever the player uses the item while it is in the hotbar. Not to be confused with when a weapon is equipped and the player attacks with it. The inventory slot of the item is passed as the parameter. It must return an IEnumerator, so you can add Coroutines for this event. It is valid to return null if it is not a coroutine.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ItemInfo.OnEquip">
            <summary>
            This event is invoked whenever the player equips this item. (Weapon, Offhand, Helmet, Armor, Ring, or Droid). The inventory slot of this item is passed as the parameter.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ItemInfo.OnDequip">
            <summary>
            This event is invoked whenever the player dequips this item. (Weapon, Offhand, Helmet, Armor, Ring, or Droid). The inventory slot of this item is passed as the parameter.
            </summary>
        </member>
        <member name="E:GadgetCore.API.ItemInfo.OnAttack">
            <summary>
            This event is invoked whenever the player attacks with this item. It must be a <see cref="F:GadgetCore.API.ItemType.WEAPON"/>, and it must be equipped to the weapon slot. It must return an IEnumerator, so you can add Coroutines for this event. It is valid to return null if it is not a coroutine.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.GetDefaultAttackType(System.Int32)">
            <summary>
            Gets the default attack routine for the given ItemInfo, assuming that it is has a vanilla ID. It is recommended to set OnAttack to this if you are overriding a vanilla weapon. This is only valid to use without specifying the ID parameter after registering the item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.SwingSword(PlayerScript)">
            <summary>
            Attack routine for swinging a sword. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.SwingGiantSword(PlayerScript)">
            <summary>
            Attack routine for swinging a giant sword, which is 50% larger than a regular sword. Giant swords in the base game are the Colossus, Heaven's Cloud, Caius' Demonblade, Zweihander, Claymore, and Azazel's Blade. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.ThrustLance(PlayerScript)">
            <summary>
            Attack routine for thrusting a lance. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.ShootGun(PlayerScript)">
            <summary>
            Attack routine for shooting a gun. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.ShootCannon(PlayerScript)">
            <summary>
            Attack routine for shooting a cannon. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.CastGauntlet(PlayerScript)">
            <summary>
            Attack routine for casting a gauntlet. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemInfo.CastStaff(PlayerScript)">
            <summary>
            Attack routine for casting a staff. Register this to OnAttack to make your weapon behave this way. Preserves the ID-specific behavior of the base game, so if the ItemInfo's ID matches the ID of a vanilla item, it will behave in the exact same way that the vanilla item of the same ID would.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ItemRegistry">
            <summary>
            This registry is filled with ItemInfos, and is used for registering custom items to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.ItemRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetItemIDByName(System.String)">
            <summary>
            Gets the item ID for the given name. Case-insensitive. Returns -1 if there is no item with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetItemIDByRegistryName(System.String)">
            <summary>
            Gets the item ID for the given registry name. Case-insensitive. Returns -1 if there is no item with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.PostRegistration(GadgetCore.API.ItemInfo)">
            <summary>
            Called after the specified Registry Entry has been registered. You should never call this yourself. Note that this is called before <see cref="M:GadgetCore.API.RegistryEntry`2.PostRegister"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.OnUnregister(GadgetCore.API.ItemInfo)">
            <summary>
            Called just before an entry is removed from the registry by <see cref="M:GadgetCore.API.Registry.UnregisterGadget(GadgetCore.API.GadgetInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetDefaultTypeByID(System.Int32)">
            <summary>
            Gets the default type of the given ID, assuming that it is a vanilla ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetDefaultWeaponScalingByID(System.Int32)">
            <summary>
            Gets the default weapon scaling of the given ID, assuming it is the ID of a vanilla weapon. Does not include any special-case scaling that varies depending on external factors such as the player's current health.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetDefaultCritChanceBonus(System.Int32)">
            <summary>
            Gets the default weapon crit chance bonus of the given ID, assuming it is the ID of a vanilla weapon. The returned value is a percentage, I.E., 5 for a 5% bonus.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetDefaultCritPowerBonus(System.Int32)">
            <summary>
            Gets the default weapon crit power bonus of the given ID, assuming it is the ID of a vanilla weapon. The returned value is an additive multiplier, I.E., 0.5 for a 50% bonus.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetTypeByID(System.Int32)">
            <summary>
            Gets the type of the specified ID. Applies to vanilla items as well as Gadget items.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.ItemRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ItemRegistry.GetItem(System.Int32)">
            <summary>
            Gets the <see cref="T:GadgetCore.API.ItemInfo"/> for the given ID. Will return a <see cref="T:GadgetCore.API.VanillaItemInfo"/> if the given ID is not in the registry, but is within the vanilla ID range. Otherwise, returns null.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ItemType">
            <summary>
            Specifies what type of item this is. These represent a set of flags, so they can be combined and masked using the | and &amp; operators respectively. I.E: 'ItemType.LOOT | ItemType.TIER1 | ItemType.ROCK'. Please note that EQUIPABLE is incompatible with LOOT, EMBLEM, USABLE, and CONSUMABLE, and attempts to combine them will result in unexpected results. Also note that the top 16 bits are flags for general use, and will be ignored by Gadget Core. They can be set using FLAG1-FLAG16
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.GENERIC">
            <summary>
            There is absolutely nothing special about this item. It can't be used or equipped, and it isn't any sort of loot or other tiered item.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.LOOT">
            <summary>
            This item is loot, as is used in the emblem forge and the alchemy table. Note that a tier and loot type should also be set. Incompatible with EQUIPABLE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.EMBLEM">
            <summary>
            This item is an emblem, as is used in the gear forge and creation machine. Note that a tier and loot type should also be set. Incompatible with EQUIPABLE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.USABLE">
            <summary>
            This item can be used from the hotbar, and doing so will invoke OnUse. Incompatible with EQUIPABLE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.CONSUMABLE">
            <summary>
            When this item is used, one of it should be consumed. Implies USABLE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.EQUIPABLE">
            <summary>
            This item can be equipped. Note that this alone does not actually make it equipable, since no equip slot will take it. Incompatible with LOOT, EMBLEM, USABLE, and CONSUMABLE.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.STACKING">
            <summary>
            This item can stack. Note that this flag is meaningless to set, and is only intended to be used for querying as such: ({Item Type} &amp; ItemType.NONSTACKING) == ItemType.STACKING
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.NONSTACKING">
            <summary>
            This item cannot stack. If an equipable item does not have this flag set, unexpected behavior may occur.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.LEVELING">
            <summary>
            This item is able to level up. Also causes the item to show the background that displays the item's rarity tier. If a leveling item is able to stack, unexpected behavior may occur.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.MODABLE">
            <summary>
            This item is able to have mods installed into it.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.MOD">
            <summary>
            This item is a gear mod, and as such can be installed into weapons, offhands, helmets, armors, and rings. Note that this is non-functional in this version of Gadget Core.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.WEAPON">
            <summary>
            This item is a weapon, and can as such can be equipped to the weapon slot. Implies EQUIPABLE, NONSTACKING, LEVELING, and MODABLE. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.OFFHAND">
            <summary>
            This item is an offhand, and can as such can be equipped to the offhand slot. Implies EQUIPABLE, NONSTACKING, LEVELING, and MODABLE. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.HELMET">
            <summary>
            This item is a helmet, and can as such can be equipped to the helmet slot. Implies EQUIPABLE, NONSTACKING, LEVELING, and MODABLE. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.ARMOR">
            <summary>
            This item is an armor, and can as such can be equipped to the armor slot. Implies EQUIPABLE, NONSTACKING, LEVELING, and MODABLE. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.RING">
            <summary>
            This item is a ring, and can as such can be equipped to a ring slot. Implies EQUIPABLE, NONSTACKING, LEVELING, and MODABLE. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.DROID">
            <summary>
            This item is a droid, and can as such can be equipped to a droid slot. Implies EQUIPABLE, NONSTACKING, and LEVELING. Use BASIC_MASK to strip all but the EQUIPABLE implication.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER1">
            <summary>
            This item is tier 1. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER2">
            <summary>
            This item is tier 2. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER3">
            <summary>
            This item is tier 3. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER4">
            <summary>
            This item is tier 4. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER5">
            <summary>
            This item is tier 5. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER6">
            <summary>
            This item is tier 6. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER7">
            <summary>
            This item is tier 7. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER8">
            <summary>
            This item is tier 8. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER9">
            <summary>
            This item is tier 9. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER10">
            <summary>
            This item is tier 10. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.ORE">
            <summary>
            This item is a rock material. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.PLANT">
            <summary>
            This item is a plant material. This is meaningless if the item is not either a LOOT or an EMBLEM. Implies ORGANIC.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.MONSTER">
            <summary>
            This item is a monster material. This is meaningless if the item is not either a LOOT or an EMBLEM. Implies ORGANIC.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.BUG">
            <summary>
            This item is a bug material. This is meaningless if the item is not either a LOOT or an EMBLEM. Implies ORGANIC.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.OTHER">
            <summary>
            This item is some other form of material besides the standard four. This is meaningless if the item is not either a LOOT or an EMBLEM.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.ORGANIC">
            <summary>
            This item is considered to be an organic material, and as such can be placed into the alchemy station if it is also a LOOT.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG1">
            <summary>
            Generic flag 1. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG2">
            <summary>
            Generic flag 2. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG3">
            <summary>
            Generic flag 3. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG4">
            <summary>
            Generic flag 4. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG5">
            <summary>
            Generic flag 5. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG6">
            <summary>
            Generic flag 6. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG7">
            <summary>
            Generic flag 7. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG8">
            <summary>
            Generic flag 8. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG9">
            <summary>
            Generic flag 9. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG10">
            <summary>
            Generic flag 10. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG11">
            <summary>
            Generic flag 11. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG12">
            <summary>
            Generic flag 12. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG13">
            <summary>
            Generic flag 13. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG14">
            <summary>
            Generic flag 14. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG15">
            <summary>
            Generic flag 15. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAG16">
            <summary>
            Generic flag 16. Gadget Core ignores this, so it can be used for whatever you wish.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.BASIC_MASK">
            <summary>
            A bitmask that filters out the LOOT, EMBLEM, USABLE, CONSUMABLE flags.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.EQUIP_MASK">
            <summary>
            A bitmask that filters out the LOOT, EMBLEM, USABLE, CONSUMABLE, and EQUIPABLE flags.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TYPE_MASK">
            <summary>
            A bitmask that filters out the EQUIPABLE, NONSTACKING, LEVELING, MODABLE, and MOD flags.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.TIER_MASK">
            <summary>
            A bitmask that filters out the TIER* flags.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.LOOT_MASK">
            <summary>
            A bitmask that filters out the ROCK, PLANT, MONSTER, BUG, OTHER, and ORGANIC flags.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ItemType.FLAGS_MASK">
            <summary>
            A bitmask that filters out the FLAG* generic flags.
            </summary>
        </member>
        <member name="T:GadgetCore.API.IUMFAPI">
            <summary>
            Interface for accessing UMF API functions while avoiding a hard assembly reference.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetVersion">
            <summary>
            Gets the UMF Version.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetMods">
            <summary>
            Gets the UMF Mods list.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModNames">
            <summary>
            Gets the UMF ModNames list.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModNamesEnabled">
            <summary>
            Gets the UMF ModNamesEnabled list.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModNamesMissingDependencies">
            <summary>
            Gets the UMF ModNamesMissingDependencies list.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModLibraries">
            <summary>
            Gets the UMF ModLibraries list.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetUMFPath">
            <summary>
            Gets the UMF directory path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModsPath">
            <summary>
            Gets the UMF Mods path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModInfosPath">
            <summary>
            Gets the UMF ModInfos path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetLibrariesPath">
            <summary>
            Gets the UMF Libraries path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetConfigsPath">
            <summary>
            Gets the UMF Configs path.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetDisabledModsFile">
            <summary>
            Gets the UMF disabled.txt file path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.IsLibrary(System.String)">
            <summary>
            Checks if the given mod name refers to a mod library.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends a command to the UMF console.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModDescription(System.String,System.Boolean)">
            <summary>
            Gets the description of the mod with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModVersion(System.String)">
            <summary>
            Gets the version of the mod with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.IUMFAPI.GetModAssembly(System.String)">
            <summary>
            Gets the assembly of the mod with the given name.
            </summary>
        </member>
        <member name="T:GadgetCore.API.LootTables">
            <summary>
            Used for management of loot tables.
            </summary>
        </member>
        <member name="M:GadgetCore.API.LootTables.DropLoot(System.String,UnityEngine.Vector3,System.Single)">
            <summary>
            Call to cause a loot table's contents to drop at the given location. dropFrequency specifies how much to delay between each dropped item.
            </summary>
        </member>
        <member name="M:GadgetCore.API.LootTables.AddToLootTable(GadgetCore.API.ItemInfo,System.String,System.Single,System.Int32,System.Int32,System.Func{UnityEngine.Vector3,System.Boolean},System.Func{Item,UnityEngine.Vector3,System.Boolean})">
            <summary>
            Adds the item to a drop table. Note that maxDropQuantity is optional, and if left unspecified minDropQuantity will always be dropped. Also returns the ItemInfo this was called on, for convenience in chaining calls.
            </summary>
            <param name="item">The item to add to the drop table. Note that the quantity specified is entirely ignored. This may be null, if you wish to entirely rely upon CustomDropBehavior</param>
            <param name="tableID">The loot table to add this item to.</param>
            <param name="dropChance">The chance for this item to drop from 0.0 to 1.0. If dropChance is higher than 1.0, then it will still just always drop. Similarly, if it is less than 0.0, then it will simply never drop.</param>
            <param name="minDropQuantity">The minimum quantity to be dropped. If maxDropQuantity is not specified, then this will always be the quantity that is dropped.</param>
            <param name="maxDropQuantity">The maximum quantity to be dropped. If this is set, then a random quantity from minDropQuantity to maxDropQuantity will be dropped.</param>
            <param name="CheckValidToDrop">Use to add custom behavior to check whether to drop an item in a given circumstance. This is always called when the loot table is dropped, even if the drop chance fails. Receives the position to be dropped at as a parameter.</param>
            <param name="CustomDropBehavior">Use to add custom behavior for how to drop the item(s). This is only called after it has been confirmed that an item will drop based on the drop chance and CheckValidToDrop. This will be called once for each item dropped in the case of non-stackable items. Receives the position to be dropped at, as well as the Item with the quantity set, as parameters.</param>
        </member>
        <member name="M:GadgetCore.API.LootTables.AddItemToLootTable(Item,System.String,System.Single,System.Int32,System.Int32,System.Func{UnityEngine.Vector3,System.Boolean},System.Func{Item,UnityEngine.Vector3,System.Boolean})">
            <summary>
            Adds the item to a drop table. Note that maxDropQuantity is optional, and if left unspecified minDropQuantity will always be dropped.
            </summary>
            <param name="item">The item to add to the drop table. Note that the quantity specified is entirely ignored. This may be null, if you wish to entirely rely upon CustomDropBehavior</param>
            <param name="tableID">The loot table to add this item to.</param>
            <param name="dropChance">The chance for this item to drop from 0.0 to 1.0. If dropChance is higher than 1.0, then it will still just always drop. Similarly, if it is less than 0.0, then it will simply never drop.</param>
            <param name="minDropQuantity">The minimum quantity to be dropped. If maxDropQuantity is not specified, then this will always be the quantity that is dropped.</param>
            <param name="maxDropQuantity">The maximum quantity to be dropped. If this is set, then a random quantity from minDropQuantity to maxDropQuantity will be dropped.</param>
            <param name="CheckValidToDrop">Use to add custom behavior to check whether to drop an item in a given circumstance. This is always called when the loot table is dropped, even if the drop chance fails. Receives the position to be dropped at as a parameter.</param>
            <param name="CustomDropBehavior">Use to add custom behavior for how to drop the item(s). This is only called after it has been confirmed that an item will drop based on the drop chance and CheckValidToDrop. This will be called once for each item dropped in the case of non-stackable items.  Receives the position to be dropped at, as well as the Item with the quantity set, as parameters.</param>
        </member>
        <member name="M:GadgetCore.API.LootTables.AddToLootTable(GadgetCore.API.ChipInfo,System.String,System.Single,System.Int32,System.Int32,System.Func{UnityEngine.Vector3,System.Boolean},System.Func{Item,UnityEngine.Vector3,System.Boolean})">
            <summary>
            Adds the chip to a drop table. Note that maxDropQuantity is optional, and if left unspecified minDropQuantity will always be dropped. Also returns the ChipInfo this was called on, for convenience in chaining calls.
            </summary>
            <param name="chip">The chip to add to the drop table.</param>
            <param name="tableID">The loot table to add this item to.</param>
            <param name="dropChance">The chance for this item to drop from 0.0 to 1.0. If dropChance is higher than 1.0, then it will still just always drop. Similarly, if it is less than 0.0, then it will simply never drop.</param>
            <param name="minDropQuantity">The minimum quantity to be dropped. If maxDropQuantity is not specified, then this will always be the quantity that is dropped.</param>
            <param name="maxDropQuantity">The maximum quantity to be dropped. If this is set, then a random quantity from minDropQuantity to maxDropQuantity will be dropped.</param>
            <param name="CheckValidToDrop">Use to add custom behavior to check whether to drop a chip in a given circumstance. This is always called when the loot table is dropped, even if the drop chance fails. Receives the position to be dropped at as a parameter.</param>
            <param name="CustomDropBehavior">Use to add custom behavior for how to drop the chip(s). This is only called after it has been confirmed that an item will drop based on the drop chance and CheckValidToDrop. This will be called once for each chip dropped. Receives the position to be dropped at, as well as the Item with the quantity set, as parameters.</param>
        </member>
        <member name="M:GadgetCore.API.LootTables.AddChipToLootTable(System.Int32,System.String,System.Single,System.Int32,System.Int32,System.Func{UnityEngine.Vector3,System.Boolean},System.Func{Item,UnityEngine.Vector3,System.Boolean})">
            <summary>
            Adds the chip to a drop table. Note that maxDropQuantity is optional, and if left unspecified minDropQuantity will always be dropped.
            </summary>
            <param name="chip">The chip to add to the drop table.</param>
            <param name="tableID">The loot table to add this item to.</param>
            <param name="dropChance">The chance for this item to drop from 0.0 to 1.0. If dropChance is higher than 1.0, then it will still just always drop. Similarly, if it is less than 0.0, then it will simply never drop.</param>
            <param name="minDropQuantity">The minimum quantity to be dropped. If maxDropQuantity is not specified, then this will always be the quantity that is dropped.</param>
            <param name="maxDropQuantity">The maximum quantity to be dropped. If this is set, then a random quantity from minDropQuantity to maxDropQuantity will be dropped.</param>
            <param name="CheckValidToDrop">Use to add custom behavior to check whether to drop a chip in a given circumstance. This is always called when the loot table is dropped, even if the drop chance fails. Receives the position to be dropped at as a parameter.</param>
            <param name="CustomDropBehavior">Use to add custom behavior for how to drop the chip(s). This is only called after it has been confirmed that an item will drop based on the drop chance and CheckValidToDrop. This will be called once for each chip dropped. Receives the position to be dropped at, as well as the Item with the quantity set, as parameters.</param>
        </member>
        <member name="T:GadgetCore.API.MathUtils">
            <summary>
            Provides a few simple convenience methods related to math.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MathUtils.IsPerfectSquare(System.Int32)">
            <summary>
            Returns true if value is a perfect square. Otherwise returns false.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MathUtils.NextPerfectSquare(System.Int32)">
            <summary>
            Returns the next perfect square after value. Value does not have to be a perfect square itself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MathUtils.SmallestPerfectSquare(System.Int32)">
            <summary>
            Returns the smallest perfect square that is at least value. If value is already a perfect square, returns value.
            </summary>
        </member>
        <member name="T:GadgetCore.API.MenuInfo">
            <summary>
            Represents a craft menu, such as the emblem forge or the alchemy station. Also includes custom craft menus.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuInfo.Type">
            <summary>
            The MenuType of this Menu
            </summary>
        </member>
        <member name="P:GadgetCore.API.MenuInfo.MenuPrefab">
            <summary>
            The Prefab that is injected into the game scene.
            </summary>
        </member>
        <member name="P:GadgetCore.API.MenuInfo.Tile">
            <summary>
            The Material associated with this item. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.MenuInfo.IsOpen">
            <summary>
            Indicates whether this menu is currently open.
            </summary>
        </member>
        <member name="P:GadgetCore.API.MenuInfo.MenuObj">
            <summary>
            The GameObject that represents this menu in the scene. Not to be confused with MenuPrefab.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.#ctor(GadgetCore.API.MenuType,UnityEngine.GameObject,GadgetCore.API.TileInfo)">
            <summary>
            Use to create a new MenuInfo. Make sure to call Register on it to register your Menu.\
            </summary>
            <param name="Type">The MenuType of this Menu</param>
            <param name="MenuPrefab">The Prefab that is injected into the game scene.</param>
            <param name="Tile">An optional parameter that specifies what Interactive tile should open the menu when interacted with.</param>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this MenuInfo to the MenuRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.CanOpenMenu">
            <summary>
            Override to add special conditions under which the menu may not be opened.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.OpenMenu">
            <summary>
            Opens this Menu
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.CloseMenu">
            <summary>
            Closes this Menu
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.OpenMenuRoutine">
            <summary>
            Opens this Menu
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.CloseMenuRoutine">
            <summary>
            Closes this Menu
            </summary>
        </member>
        <member name="E:GadgetCore.API.MenuInfo.OnMenuOpened">
            <summary>
            Called immediately <em>before</em> the menu is opened. (Before it is enabled)
            </summary>
        </member>
        <member name="E:GadgetCore.API.MenuInfo.OnMenuClosed">
            <summary>
            Called immediately <em>after</em> the menu is closed. (After it is disabled)
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.InvokeOnMenuOpened">
            <summary>
            Triggers the OnMenuOpened event. Should only be used by <see cref="M:GadgetCore.API.MenuInfo.OpenMenuRoutine"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.InvokeOnMenuClosed">
            <summary>
            Triggers the OnMenuClosed event. Should only be used by <see cref="M:GadgetCore.API.MenuInfo.CloseMenuRoutine"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.MenuInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="T:GadgetCore.API.MenuRegistry">
            <summary>
            This registry is filled with MenuInfos, and is used for registering custom menus to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.MenuRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.MenuRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.MenuRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="T:GadgetCore.API.MenuType">
            <summary>
            Specifies what type of menu this is.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuType.SIMPLE">
            <summary>
            Simple menu. Opens alongside the player's inventory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuType.CRAFTING">
            <summary>
            Used for crafting. Opens alongside the player's inventory.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuType.CHIP">
            <summary>
            Contains chip slots. Causes the chip bar to become visible.
            </summary>
        </member>
        <member name="F:GadgetCore.API.MenuType.EXCLUSIVE">
            <summary>
            Does not contain item slots. Cannot be open alongside the player's inventory.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ObjectInfo">
            <summary>
            Defines a custom Object. Make sure to call Register on it to register your Object.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectInfo.Type">
            <summary>
            The ObjectType of this Object.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectInfo.ItemDrop">
            <summary>
            The the Item to drop when harvested.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectInfo.RandomDropBonus">
            <summary>
            Up to this many extra items may be dropped for each "hit" of the resource.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectInfo.ColliderOffset">
            <summary>
            The offset of this Object's harvest collider.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.Tex">
            <summary>
            The Texture associated with this Object. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.FlyHeadTex">
            <summary>
            The Texture associated with this Object's Fly's head. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.FlyWingTex">
            <summary>
            The Texture associated with this Object's Fly's wing. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.Mat">
            <summary>
            The Material associated with this Object. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.FlyHeadMat">
            <summary>
            The Material associated with this Object's Fly's head. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.FlyWingMat">
            <summary>
            The Material associated with this Object's Fly's wing. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.Object">
            <summary>
            The GameObject representing this Object. This is registered as a prefab.
            </summary>
        </member>
        <member name="P:GadgetCore.API.ObjectInfo.ResourcePath">
            <summary>
            The string usable in <see cref="M:UnityEngine.Resources.Load(System.String)"/> to load this object.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.#ctor(GadgetCore.API.ObjectType,Item,System.Int32,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Vector2)">
            <summary>
            Use to create a new ObjectInfo. Make sure to call Register on it to register your Object.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.#ctor(GadgetCore.API.ObjectType,Item,System.Int32,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Vector2)">
            <summary>
            Use to create a new ObjectInfo. Make sure to call Register on it to register your Object.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.DropItem(UnityEngine.Vector3)">
            <summary>
            Prompts this resource node to drop one hit's worth of items.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this ObjectInfo to the ObjectRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.ObjectInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ObjectRegistry">
            <summary>
            This registry is filled with ObjectInfos, and is used for registering custom harvestable objects to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.ObjectRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.ObjectRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.ObjectRegistry"/> always returns 200.
            </summary>
        </member>
        <member name="T:GadgetCore.API.ObjectType">
            <summary>
            Specifies what type of object this is.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectType.ORE">
            <summary>
            This is functionally an ore node.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectType.TREE">
            <summary>
            This is functionally a tree.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectType.PLANT">
            <summary>
            This is functionally a plant.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectType.BUGSPOT">
            <summary>
            This is functionally a bugspot.
            </summary>
        </member>
        <member name="F:GadgetCore.API.ObjectType.OTHER">
            <summary>
            This is some sort of object that does not fall into any of the standard types. By default, will be ignored by droids despite being clickable.
            </summary>
        </member>
        <member name="T:GadgetCore.API.PlanetInfo">
            <summary>
            Represents a craft menu, such as the emblem forge or the alchemy station. Also includes custom craft menus.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetInfo.Type">
            <summary>
            The PlanetType of this Planet
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetInfo.Name">
            <summary>
            The name of this Planet
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetInfo.WeightedExitPortalIDs">
            <summary>
            The list of possible exit portal destinations.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.EntranceTex">
            <summary>
            The Texture associated with this planet's entrance. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.ZoneTex">
            <summary>
            The Texture associated with this planet's zones. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.MidChunk0Tex">
            <summary>
            The Texture associated with this planet's solid mid-chunks. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.MidChunk1Tex">
            <summary>
            The Texture associated with this planet's hollow mid-chunks. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SideHTex">
            <summary>
            The Texture associated with this planet's horizontal side walls. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SideVTex">
            <summary>
            The Texture associated with this planet's vertical side walls. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.PortalSignTex">
            <summary>
            The Texture associated with this planet's portal sign. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SelectorButtonTex">
            <summary>
            The Texture associated with this planet's button in the planet selector. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SelectorIconTex">
            <summary>
            The Texture associated with this planet's icon in the planet selector. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.BackgroundParallaxTex">
            <summary>
            The Texture associated with this planet's background parallax. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.BackgroundImageTexes">
            <summary>
            The Textures associated with this planet's background images. There should be 4. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.EntranceMat">
            <summary>
            The Material associated with this planet's entrance. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.ZoneMat">
            <summary>
            The Material associated with this planet's zones. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.MidChunk0Mat">
            <summary>
            The Material associated with this planet's solid mid-chunks. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.MidChunk1Mat">
            <summary>
            The Material associated with this planet's hollow mid-chunks. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SideHMat">
            <summary>
            The Material associated with this planet's horizontal side walls. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SideVMat">
            <summary>
            The Material associated with this planet's vertical side walls. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.PortalSignMat">
            <summary>
            The Material associated with this planet's portal sign. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SelectorButtonMat">
            <summary>
            The Material associated with this planet's button in the planet selector. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.SelectorIconMat">
            <summary>
            The Material associated with this planet's icon in the planet selector. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.BackgroundParallaxMat">
            <summary>
            The Material associated with this planet's background parallax. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.BackgroundImageMats">
            <summary>
            The Materials associated with this planet's background images. There should be 4. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.BackgroundMusic">
            <summary>
            The background music that plays when at this Planet.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.PortalUses">
            <summary>
            The number of portal uses the player has for this planet.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetInfo.Relics">
            <summary>
            The number of relics the player has collected for this planet.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetInfo.weightedWorldSlotSpawns">
            <summary>
            Weighted list of possible spawn delegates in world spawn slots.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetInfo.weightedTownSlotSpawns">
            <summary>
            Weighted list of possible spawn delegates in town spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.#ctor(GadgetCore.API.PlanetType,System.String,GadgetCore.Util.Tuple{System.Int32,System.Int32}[])">
            <summary>
            Use to create a new PlanetInfo. Make sure to call Register on it to register your Planet.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.#ctor(GadgetCore.API.PlanetType,System.String,GadgetCore.Util.Tuple{System.Int32,System.Int32}[],UnityEngine.AudioClip)">
            <summary>
            Use to create a new PlanetInfo. Make sure to call Register on it to register your Planet.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetPortalInfo(UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Sets information related to this planet's portal. If <paramref name="SelectorButtonTex"/> is null, the planet will not appear in the planet selector. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetPortalInfo(UnityEngine.Material,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Sets information related to this planet's portal. If <paramref name="SelectorButtonMat"/> is null, the planet will not appear in the planet selector. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetTerrainInfo(UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Sets information related to this planet's terrain. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetTerrainInfo(UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Sets information related to this planet's terrain. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetBackgroundInfo(UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Sets information related to this planet's background. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.SetBackgroundInfo(UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            Sets information related to this planet's background. This must be called before Register.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this PlanetInfo to the PlanetRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedBiomeSpawnEvent">
            <summary>
            Adds the weighted spawn event to <see cref="E:GadgetCore.API.PlanetInfo.OnSpawnBiomeSlot"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedTownSpawnEvent">
            <summary>
            Adds the weighted spawn event to <see cref="E:GadgetCore.API.PlanetInfo.OnSpawnBiomeSlot"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedWorldSpawn(GadgetCore.API.EntityInfo,System.Int32)">
            <summary>
            Adds a weighted spawn to the world spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedWorldSpawn(GadgetCore.API.ObjectInfo,System.Int32)">
            <summary>
            Adds a weighted spawn to the world spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedWorldSpawn(System.String,System.Int32)">
            <summary>
            Adds a weighted spawn to the world spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedWorldSpawn(System.Func{UnityEngine.Vector3,UnityEngine.GameObject},System.Int32)">
            <summary>
            Adds a weighted spawn to the world spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedWorldSpawn(System.Func{UnityEngine.Vector3,UnityEngine.GameObject[]},System.Int32)">
            <summary>
            Adds a weighted spawn to the world spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedTownSpawn(System.String,System.Int32)">
            <summary>
            Adds a weighted spawn to the town spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedTownSpawn(System.Func{UnityEngine.Vector3,UnityEngine.GameObject},System.Int32)">
            <summary>
            Adds a weighted spawn to the town spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.AddWeightedTownSpawn(System.Func{UnityEngine.Vector3,UnityEngine.GameObject[]},System.Int32)">
            <summary>
            Adds a weighted spawn to the town spawn slots.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.PlanetInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnGenerateWorld">
            <summary>
            This event is invoked when it is time for this planet to generate a world.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnGenerateTown">
            <summary>
            This event is invoked when it is time for this planet to generate a town.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnGenerateInside">
            <summary>
            This event is invoked when it is time for this planet to generate a world chunk. Returns any and all networked objects that are spawned.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnGenerateInsideTown">
            <summary>
            This event is invoked when it is time for this planet to generate a town chunk. Returns any and all networked objects that are spawned.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnSpawnBiomeSlot">
            <summary>
            This event is invoked when it is time for this planet to generate a world chunk spawn slot. Returns any and all networked objects that are spawned.
            </summary>
        </member>
        <member name="E:GadgetCore.API.PlanetInfo.OnSpawnTownSlot">
            <summary>
            This event is invoked when it is time for this planet to generate a town chunk spawn slot. Returns any and all networked objects that are spawned.
            </summary>
        </member>
        <member name="T:GadgetCore.API.PlanetRegistry">
            <summary>
            This registry is filled with MenuInfos, and is used for registering custom menus to the game.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetRegistry.PlanetSelectorPages">
            <summary>
            The number of pages that the planet selector has thanks to added planets.
            </summary>
        </member>
        <member name="P:GadgetCore.API.PlanetRegistry.PlanetSelectorPage">
            <summary>
            The current page of the planet selector.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.SetVanillaExitPortalWeight(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the weight for a planet of ID <paramref name="portalID"/> to appear in an exit portal on the vanilla planet of ID <paramref name="planetID"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.GetVanillaExitPortalWeights(System.Int32)">
            <summary>
            Gets the weights of the possible exit portal plenets for the given vanilla planet ID
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.PlanetRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.GetPlanetIDByName(System.String)">
            <summary>
            Gets the planet ID for the given name. Case-insensitive. Returns -1 if there is no planet with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.GetPlanetIDByRegistryName(System.String)">
            <summary>
            Gets the planet ID for the given registry name. Case-insensitive. Returns -1 if there is no planet with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.PostRegistration(GadgetCore.API.PlanetInfo)">
            <summary>
            Called after the specified Registry Entry has been registered. You should never call this yourself. Note that this is called before <see cref="M:GadgetCore.API.RegistryEntry`2.PostRegister"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.OnUnregister(GadgetCore.API.PlanetInfo)">
            <summary>
            Called just before an entry is removed from the registry by <see cref="M:GadgetCore.API.Registry.UnregisterGadget(GadgetCore.API.GadgetInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlanetRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.MenuRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="T:GadgetCore.API.PlanetType">
            <summary>
            Specifies what type of planet this is.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetType.NORMAL">
            <summary>
            A standard planet with alternating worlds and towns.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetType.TOWNS">
            <summary>
            A planet consisting only of towns, like Old Earth.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetType.SINGLE">
            <summary>
            A planet with only a single town, like Mech City.
            </summary>
        </member>
        <member name="F:GadgetCore.API.PlanetType.SPECIAL">
            <summary>
            Some special sort of planet with unique world generation.
            </summary>
        </member>
        <member name="T:GadgetCore.API.PlayerGearModsTracker">
            <summary>
            Tracks what gear mods each player has, since for some reason the base game does not do this.
            </summary>
        </member>
        <member name="M:GadgetCore.API.PlayerGearModsTracker.GetGearMods(PlayerScript)">
            <summary>
            In theory, returns the gear mods that the given player has, in the same format as GameScript.MODS. In practice, it currently just returns GameScript.MODS.
            This exists so that Gadget Core can later add this functionality without it being a breaking change.
            As such, whenever you need to query what gear mods the player has, you should use this.
            </summary>
        </member>
        <member name="T:GadgetCore.API.Registry`3">
            <summary>
            Represents a registry filled with <see cref="T:GadgetCore.API.RegistryEntry`2"/>s. You can extend this to create your own registries, and then you should return their singletons in <see cref="M:GadgetCore.API.Gadget.CreateRegistries"/>
            </summary>
            <typeparam name="R">Registry Type</typeparam>
            <typeparam name="E">Entry Type</typeparam>
            <typeparam name="T">Entry Type Enum</typeparam>
        </member>
        <member name="P:GadgetCore.API.Registry`3.Singleton">
            <summary>
            Represents this Registry's singleton.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.IDMatchesType(System.Int32,`2,`2)">
            <summary>
            Checks if a given Registry ID matches the given Entry type. Optionally applies a flags mask to both the entry's type and the given type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.Register(`1,System.String,System.Int32,System.Boolean)">
            <summary>
            Used to register a registry entry to this registry. You should probably use the Register method on that registry entry instead.
            </summary>
            <param name="entry">The RegistryEntry to register.</param>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GenerateDefaultRegistryName(System.Int32)">
            <summary>
            Used to provide a default name if a registry entry is registered without a registry name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.PostRegistration(`1)">
            <summary>
            Called after the specified Registry Entry has been registered. You should never call this yourself. Note that this is called before <see cref="M:GadgetCore.API.RegistryEntry`2.PostRegister"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.OnUnregister(`1)">
            <summary>
            Called just before an entry is removed from the registry by <see cref="M:GadgetCore.API.Registry.UnregisterGadget(GadgetCore.API.GadgetInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetSingleton">
            <summary>
            Gets the singleton for this registry.
            Deprecated: Use the Singleton property instead.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.HasEntry(System.Int32)">
            <summary>
            Checks if the given ID is used in this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.HasEntry(System.String)">
            <summary>
            Checks if the given RegistryName is used in this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetEntry(System.Int32)">
            <summary>
            Gets the registry entry with the given ID
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetEntry(System.String)">
            <summary>
            Gets the registry entry with the given RegistryName
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.TryGetEntry(System.Int32,`1@)">
            <summary>
            Tries to get the registry entry with the given ID
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.TryGetEntry(System.String,`1@)">
            <summary>
            Tries to get the registry entry with the given RegistryName
            </summary>
        </member>
        <member name="P:GadgetCore.API.Registry`3.Item(System.Int32)">
            <summary>
            Equivalent to calling <see cref="M:GadgetCore.API.Registry`3.GetEntry(System.Int32)"/>
            </summary>
        </member>
        <member name="P:GadgetCore.API.Registry`3.Item(System.String)">
            <summary>
            Equivalent to calling <see cref="M:GadgetCore.API.Registry`3.GetEntry(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetEntryType">
            <summary>
            Returns the Registry Entry's Type. Not to be confused with <see cref="M:GadgetCore.API.RegistryEntry`2.GetEntryType"/>, which returns an enum value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetAllEntries">
            <summary>
            Returns an array of every entry in this Registry
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry`3.GetEnumerator">
            <summary>
            Returns an enumerator for the entries in this Registry
            </summary>
        </member>
        <member name="T:GadgetCore.API.Registry`2">
            <summary>
            Registry superclass without the self-referencing supertype. Do not extend this!
            </summary>
            <typeparam name="E">Entry Type</typeparam>
            <typeparam name="T">Entry Type Enum</typeparam>
        </member>
        <member name="M:GadgetCore.API.Registry`2.Register(`0,System.String,System.Int32,System.Boolean)">
            <summary>
            Used to register a registry entry to this registry. You should probably use the Register method on that registry entry instead.
            </summary>
            <param name="entry">The RegistryEntry to register.</param>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="T:GadgetCore.API.Registry">
            <summary>
            Registry superclass without any generics. Do not extend this!
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry.GetReservedID(System.String)">
            <summary>
            Gets the reserved ID for the registry entry with the specified registry name. Returns -1 if there is no ID reserved for that registry name.
            </summary>
            <param name="name">The registry name, in the format ModName:RegistryEntry</param>
        </member>
        <member name="M:GadgetCore.API.Registry.IsIDReserved(System.Int32)">
            <summary>
            Returns the name of the mod that reserved the given ID, or returns null if the ID is not reserved
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry.GetEntryType">
            <summary>
            Returns the Registry Entry's Type. Not to be confused with <see cref="M:GadgetCore.API.RegistryEntry`2.GetEntryType"/>, which returns an enum value.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant.
            </summary>
        </member>
        <member name="M:GadgetCore.API.Registry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. May be 0 if the base game does not use IDs for this type of data.
            </summary>
        </member>
        <member name="T:GadgetCore.API.RegistryEntry`2">
            <summary>
            Abstract classed used for Registry Entries. Extend to create Registry Entries for your own custom Registry.
            </summary>
            <typeparam name="E">Entry Type</typeparam>
            <typeparam name="T">Entry Type Enum</typeparam>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetMod">
            <summary>
            Gets the mod that registered this Registry Entry. This will return null until the Registry Entry has been registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetModID">
            <summary>
            Gets the Mod ID that registered this Registry Entry. This ID is the index of the mod as used in <see cref="M:GadgetCore.API.Gadgets.GetGadget(System.Int32)"/>. This will be -1 until the Registry Entry has been registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetID">
            <summary>
            Gets the ID of this registry entry. This will be -1 until the Registry Entry has been registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetRegistryName">
            <summary>
            Gets the Registry Name of this item, in the format of ModName:ItemName
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.RegisterInternal(System.String,System.Int32,System.Boolean)">
            <summary>
            Use to register this RegistryEntry to its registry singleton.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.ReadyToRegister">
            <summary>
            Returns true if this Registry Entry is ready to be registered. Returns false if the registry entry is not yet in the correct state to be registered, or has already been registered.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetEntryType">
            <summary>
            Returns the Registry Entry's Type. Used in the registration process.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.RegistryEntry`2.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID.
            </summary>
        </member>
        <member name="T:GadgetCore.API.StatModifierType">
            <summary>
            Indicates the type of stat modifier the modifier being applied is. Note that they are applied in the order Flat -> AddMult -> ExpMult. Also note that the 'AddMult' types are additive multipliers, meaning that, for example, returning EquipStats.ONE will double the base stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.BaseFlat">
            <summary>
            Adds a flat modifier to the item's true base stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.BaseAddMult">
            <summary>
            Adds a multiplicative modifier based off of the item's true base stats to the item's modified base stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.BaseExpMult">
            <summary>
            Applies a multiplicative modifier based off of the item's modified base stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.LevelFlat">
            <summary>
            Adds an otherwise flat modifier that scales with the item's level.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.LevelAddMult">
            <summary>
            Adds a multiplicative modifier based off of the item's base stats that scales with each level.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.LevelExpMult">
            <summary>
            Applies a multiplicative modifier based off the item's modified stats that scales with each level.
            WARNING: Think about what you are doing before using this one. Thanks to the level scaling, things can get out of hand very quickly.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.Flat">
            <summary>
            Adds a simple flat modifier to the item's stats. Behaves the same way as the bonuses from item quality, or stat-boosting gear mods do.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.AddMult">
            <summary>
            Adds a simple multiplicative modifier based of the item's base stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.ExpMult">
            <summary>
            Applies a simple multiplicative modifier based of the item's modified stats.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.FinalFlat">
            <summary>
            Adds a flat modifier that is applied after all non-Final modifiers have been applied.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.FinalAddMult">
            <summary>
            Adds a multiplicative modifier based off of the item's final stats pre-modification that is applied after all non-Final modifiers have been applied.
            </summary>
        </member>
        <member name="F:GadgetCore.API.StatModifierType.FinalExpMult">
            <summary>
            Applies a multiplicative modifier based off of the item's final modified stats that is applied after all other modifiers have been applied.
            </summary>
        </member>
        <member name="T:GadgetCore.API.TileInfo">
            <summary>
            Defines a custom Tile. Make sure to call Register on it to register your Tile.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileInfo.Type">
            <summary>
            The TileType of this Tile
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileInfo.Item">
            <summary>
            The ItemInfo of the item that places this tile. May be null.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileInfo.Prop">
            <summary>
            The Prop or NPC associated with this tile. Will by an NPC if this tile's Type is Interactive, otherwise will be a Prop. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.TileInfo.Tex">
            <summary>
            The Texture associated with this tile. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.TileInfo.Mat">
            <summary>
            The Material associated with this tile. May be null.
            </summary>
        </member>
        <member name="P:GadgetCore.API.TileInfo.Sprite">
            <summary>
            The <see cref="T:GadgetCore.API.GadgetCoreAPI.SpriteSheetEntry"/> associated with this tile. Will be null unless the tile's Type is SOLID or WALL.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.#ctor(GadgetCore.API.TileType,UnityEngine.Texture2D,GadgetCore.API.ItemInfo)">
            <summary>
            Use to create a new TileInfo. This constructor should be used if the Type is SOLID or WALL. Make sure to call Register on it to register your Tile.
            </summary>
            <param name="Type">The <see cref="T:GadgetCore.API.TileType"/> of this Tile</param>
            <param name="Tex">The Texture of this Tile</param>
            <param name="Item">The Item that places this tile. Automatically calls <see cref="M:GadgetCore.API.ItemInfo.SetTile(GadgetCore.API.TileInfo)"/>, so there is no need to do that yourself.</param>
        </member>
        <member name="M:GadgetCore.API.TileInfo.#ctor(GadgetCore.API.TileType,UnityEngine.Material,GadgetCore.API.ItemInfo)">
            <summary>
            Use to create a new TileInfo. This constructor should be used if the Type is SOLID or WALL. Make sure to call Register on it to register your Tile.
            </summary>
            <param name="Type">The <see cref="T:GadgetCore.API.TileType"/> of this Tile</param>
            <param name="Mat">The Material of this Tile</param>
            <param name="Item">The Item that places this tile. Automatically calls <see cref="M:GadgetCore.API.ItemInfo.SetTile(GadgetCore.API.TileInfo)"/>, so there is no need to do that yourself.</param>
        </member>
        <member name="M:GadgetCore.API.TileInfo.#ctor(GadgetCore.API.TileType,UnityEngine.Texture2D,UnityEngine.GameObject,GadgetCore.API.ItemInfo)">
            <summary>
            Use to create a new TileInfo. This constructor should be used if the Type is NONSOLID or INTERACTIVE. Make sure to call Register on it to register your Tile.
            </summary>
            <param name="Type">The <see cref="T:GadgetCore.API.TileType"/> of this Tile</param>
            <param name="Tex">The Texture of this Tile</param>
            <param name="Prop">The Prop of this Tile. Will be registered as an NPC of the Type is INTERACTIVE</param>
            <param name="Item">The Item that places this tile. Automatically calls <see cref="M:GadgetCore.API.ItemInfo.SetTile(GadgetCore.API.TileInfo)"/>, so there is no need to do that yourself.</param>
        </member>
        <member name="M:GadgetCore.API.TileInfo.#ctor(GadgetCore.API.TileType,UnityEngine.Material,UnityEngine.GameObject,GadgetCore.API.ItemInfo)">
            <summary>
            Use to create a new TileInfo. This constructor should be used if the Type is NONSOLID or INTERACTIVE. Make sure to call Register on it to register your Tile.
            </summary>
            <param name="Type">The <see cref="T:GadgetCore.API.TileType"/> of this Tile</param>
            <param name="Mat">The Material of this Tile</param>
            <param name="Prop">The Prop of this Tile. Will be registered as an NPC of the Type is INTERACTIVE</param>
            <param name="Item">The Item that places this tile. Automatically calls <see cref="M:GadgetCore.API.ItemInfo.SetTile(GadgetCore.API.TileInfo)"/>, so there is no need to do that yourself.</param>
        </member>
        <member name="M:GadgetCore.API.TileInfo.Register(System.String,System.Int32,System.Boolean)">
            <summary>
            Registers this TileInfo to the TileRegistry.
            </summary>
            <param name="name">The registry name to use.</param>
            <param name="preferredID">If specified, will use this registry ID.</param>
            <param name="overrideExisting">If false, will not register if the preferred ID is already used. Ignored if no preferred ID is specified.</param>
        </member>
        <member name="M:GadgetCore.API.TileInfo.PostRegister">
            <summary>
            Called after this Registry Entry has been registered to its Registry. You should never call this yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.GetEntryType">
            <summary>
            Returns the Registry Entry's Type enum. Used in the registration process, although it is safe to check this yourself by directly accessing the <see cref="F:GadgetCore.API.TileInfo.Type"/> property.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.GetRegistry">
            <summary>
            Returns the singleton of the registry used for storing this type of Registry Entry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.IsValidIDForType(System.Int32)">
            <summary>
            Returns whether the specified ID is valid for this Registry Entry's Type.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.GetNextIDForType(System.Int32)">
            <summary>
            Returns the next valid ID for this Registry Entry's Type, after the provided lastValidID. Should skip the vanilla ID range.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileInfo.TryPlaceTile">
            <summary>
            Called when this tile's item is about to be placed using Build Mode. Return false to prevent it from being placed.
            </summary>
        </member>
        <member name="E:GadgetCore.API.TileInfo.OnInteract">
            <summary>
            Called when this tile is interacted with. Will only ever be called if the Prop's layer is 12, which it will automatically be set to if the Type is specified as INTERACTIVE
            </summary>
        </member>
        <member name="T:GadgetCore.API.TileRegistry">
            <summary>
            This registry is filled with TileInfos, and is used for registering custom tiles to the game.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileRegistry.REGISTRY_NAME">
            <summary>
            The name of this registry.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.GetRegistryName">
            <summary>
            Gets the name of this registry. Must be constant. Returns <see cref="F:GadgetCore.API.TileRegistry.REGISTRY_NAME"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.GetDefaultTypeByID(System.Int32)">
            <summary>
            Gets the default type of the given ID, assuming that it is a vanilla ID.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.GetIDByPropName(System.String)">
            <summary>
            Gets the ID of the TileInfo whose prop has the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.PostRegistration(GadgetCore.API.TileInfo)">
            <summary>
            Called after the specified Registry Entry has been registered. You should never call this yourself. Note that this is called before <see cref="M:GadgetCore.API.RegistryEntry`2.PostRegister"/>
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.GetIDStart">
            <summary>
            Gets the ID that modded IDs should start at for this registry. <see cref="T:GadgetCore.API.TileRegistry"/> always returns 10000.
            </summary>
        </member>
        <member name="M:GadgetCore.API.TileRegistry.GetTile(System.Int32)">
            <summary>
            Gets the <see cref="T:GadgetCore.API.TileInfo"/> for the given ID. Will return a <see cref="T:GadgetCore.API.VanillaTileInfo"/> if the given ID is not in the registry, but is within the vanilla ID range. Otherwise, returns null.
            </summary>
        </member>
        <member name="T:GadgetCore.API.TileType">
            <summary>
            Specifies what type of tile this is.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileType.SOLID">
            <summary>
            This tile is completely solid.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileType.NONSOLID">
            <summary>
            This tile is not completely solid, and instead uses a prop, which may or may not have any collision.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileType.INTERACTIVE">
            <summary>
            This tile is interactive, such as a crafting station. It uses a prop, although it should not have any collision.
            </summary>
        </member>
        <member name="F:GadgetCore.API.TileType.WALL">
            <summary>
            This tile is a background wall.
            </summary>
        </member>
        <member name="T:GadgetCore.API.VanillaItemInfo">
            <summary>
            This is a wrapper for vanilla Item IDs to a Gadget Core ItemInfo. Use to get in-depth info about a vanilla item, in Gadget Core's terms. Can also be used to register events to occur upon firing vanilla weapons.
            </summary>
        </member>
        <member name="M:GadgetCore.API.VanillaItemInfo.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new VanillaItemInfo based upon the given ID. Do not try to call this yourself - use <see cref="M:GadgetCore.API.VanillaItemInfo.Wrap(System.Int32,System.Boolean)"/>
            </summary>
            <param name="ID">The vanilla ID to be wrapped.</param>
            <param name="WrapForTile">If true, the Tile property should not be set by this constructor, as it will be set later as part of a TileInfo's constructor.</param>
        </member>
        <member name="M:GadgetCore.API.VanillaItemInfo.Wrap(System.Int32,System.Boolean)">
            <summary>
            Provides a wrapper for the given vanilla ID. If the given ID has already been wrapped before, it will return the same wrapper instance as was returned before. If register is true, then the wrapper will be registered to its ID in the appropriate registry.
            </summary>
        </member>
        <member name="T:GadgetCore.API.VanillaTileInfo">
            <summary>
            This is a wrapper for vanilla Item IDs to a Gadget Core ItemInfo. Use to get in-depth info about a vanilla item, in Gadget Core's terms. Can also be used to register events to occur upon firing vanilla weapons.
            </summary>
        </member>
        <member name="M:GadgetCore.API.VanillaTileInfo.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new VanillaItemInfo based upon the given ID. Do not try to call this yourself - use <see cref="M:GadgetCore.API.VanillaTileInfo.Wrap(System.Int32,System.Boolean)"/>
            </summary>
            <param name="ID">The vanilla ID to be wrapped.</param>
            <param name="registerItem">Whether the VanillaItemInfo that matches this Tile ID should be wrapped into the ItemRegistry.</param>
        </member>
        <member name="M:GadgetCore.API.VanillaTileInfo.Wrap(System.Int32,System.Boolean)">
            <summary>
            Provides a wrapper for the given vanilla ID. If the given ID has already been wrapped before, it will return the same wrapper instance as was returned before. If register is true, then the wrapper will be registered to its ID in the appropriate registry.
            </summary>
        </member>
        <member name="T:GadgetCore.API.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:GadgetCore.API.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the WeakReference class, referencing the specified object.
            </summary>
            <param name="target">The object to track or null.</param>
        </member>
        <member name="M:GadgetCore.API.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the WeakReference class, referencing the specified object and using the specified resurrection tracking.
            </summary>
            <param name="target">An object to track.</param>
            <param name="trackResurrection">Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false, the object is only tracked until finalization.</param>
        </member>
        <member name="M:GadgetCore.API.WeakReference`1.GetTarget">
            <summary>
            Gets the object (the target) referenced by the current WeakReference object.
            </summary>
            <returns>null if the object referenced by the current System.WeakReference object has been garbage collected; otherwise, a reference to the object referenced by the current System.WeakReference object.</returns>
            <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference.</exception>
        </member>
        <member name="T:GadgetCore.API.UMFZipUtils">
            <summary>
            Utilities for handling packaged UMF mod zip files. Should only be used if UMF is installed.
            </summary>
        </member>
        <member name="M:GadgetCore.API.UMFZipUtils.UnpackMod(System.String)">
            <summary>
            Unpacks the .zip mod with the specified name.
            </summary>
        </member>
        <member name="M:GadgetCore.API.UMFZipUtils.UnpackModFile(System.String)">
            <summary>
            Unpacks the mod with the specified file path.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetConsole">
            <summary>
            The console used by GadgetCore. Use its static methods to interface with it from code. Note that console messages support rich text.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetConsole.Debug">
            <summary>
            Indicates whether the console should show debug messages.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetConsole.Console">
            <summary>
            The Console object in the scene
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.InputField">
            <summary>
            The text field where input is entered into the console.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.TextPanel">
            <summary>
            The panel where the console's text content is placed
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.AlwaysActivePanel">
            <summary>
            The panel where the console places recently-sent messages.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ShowConsole">
            <summary>
            Opens the console
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.HideConsole">
            <summary>
            Closes the console
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ToggleConsole">
            <summary>
            Toggles the console
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.IsOpen">
            <summary>
            Returns a value indicating whether the console is currently open.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.WasOpen">
            <summary>
            Returns a value indicating whether the console is was open one frame ago.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.DealiasCommand(System.String)">
            <summary>
            Dealiases the given command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.IsCommandExecuteBlacklisted(System.String)">
            <summary>
            Returns whether the given command is on the /execute blacklist.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RegisterCommand(System.String,System.Boolean,System.Boolean,GadgetCore.GadgetConsole.ConsoleCommand,System.String,System.String,System.String[])">
            <summary>
            Registers a command. If <paramref name="operatorOnly"/> is true, then only operators will be able to execute this command. If <paramref name="allowExecute"/> is false, then the /execute command cannot be used to force a player to run this command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RegisterCommand(System.String,System.Boolean,GadgetCore.GadgetConsole.ConsoleCommand,System.String,System.String,System.String[])">
            <summary>
            Registers a command. If <paramref name="operatorOnly"/> is true, then only operators will be able to execute this command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.Print(System.String,System.String,GadgetCore.GadgetConsole.MessageSeverity)">
            <summary>
            Prints the given text to the console. Returns the index of the message on the console, which can be used to change or remove it later. Will return -1 if the message is suppressed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.Print(GadgetCore.GadgetConsole.GadgetConsoleMessage)">
            <summary>
            Prints the given <see cref="T:GadgetCore.GadgetConsole.GadgetConsoleMessage"/> to the console. Returns the index of the message on the console, which can be used to change or remove it later. Will return -1 if the message is suppressed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.BroadcastMessage(GadgetCore.GadgetConsole.GadgetConsoleMessage)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.Print(GadgetCore.GadgetConsole.GadgetConsoleMessage)"/>, but broadcasts the message to every player's console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.BroadcastMessage(System.String,System.String,GadgetCore.GadgetConsole.MessageSeverity)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.Print(System.String,System.String,GadgetCore.GadgetConsole.MessageSeverity)"/>, but broadcasts the message to every player's console. Note that the returned ID can only be used to manipulate the message on this player, not all players.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.GetMessage(System.Int32)">
            <summary>
            Gets the message with the given index. Will return null if no message with that index exists.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ReplaceMessage(System.Int32,GadgetCore.GadgetConsole.GadgetConsoleMessage)">
            <summary>
            Replaces a previously sent message with a new one. Cannot replace messages that have been removed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RemoveMessage(System.Int32)">
            <summary>
            Permanently removes a message from the console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RemoveMessage(System.Single)">
            <summary>
            Permanently removes a message using the exact time of its sending. Since message send-times are synchronized across the network, this can be used to remove broadcasts.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ReplaceBroadcast(System.Int32,GadgetCore.GadgetConsole.GadgetConsoleMessage)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.ReplaceMessage(System.Int32,GadgetCore.GadgetConsole.GadgetConsoleMessage)"/>, but replaces a broadcast from every player's console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ReplaceBroadcast(System.Int32,System.String,System.String,GadgetCore.GadgetConsole.MessageSeverity,System.Single)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.ReplaceMessage(System.Int32,GadgetCore.GadgetConsole.GadgetConsoleMessage)"/>, but replaces a broadcast from every player's console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RemoveBroadcast(System.Int32)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.RemoveMessage(System.Int32)"/>, but removes a broadcast from every player's console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.RemoveBroadcast(System.Single)">
            <summary>
            Like <see cref="M:GadgetCore.GadgetConsole.RemoveMessage(System.Single)"/>, but removes a broadcast from every player's console.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.SendConsoleMessage(System.String,System.String,System.Boolean)">
            <summary>
            Sends a message to the console, as if it were entered by the player. Can trigger commands. If <paramref name="printCommandFeedback"/> is false, then response feedback from commands will be supressed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.SendConsoleMessage(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends a message to the console, as if it were entered by the player. Can trigger commands. If <paramref name="printCommandFeedback"/> is false, then response feedback from commands will be supressed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.IsOperator(System.String)">
            <summary>
            Returns whether the given player name is an operator.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.ParseArgs(System.String)">
            <summary>
            Parses the given text as a string of command arguments.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetConsole.ConsoleCommand">
            <summary>
            Deligate used for registering console commands. May return a message to send only to the person who ran this command. May return null to print nothing.
            </summary>
            <param name="sender">The sender for this command. May be null, if triggered directly through a call to <see cref="M:GadgetCore.GadgetConsole.SendConsoleMessage(System.String,System.String,System.Boolean)"/></param>
            <param name="args">The arguments passed to this command. Note that the first one will always be the name of the command, as it was entered.</param>
            <returns>A message to send only to the person who ran this command. May return null to print nothing.</returns>
        </member>
        <member name="T:GadgetCore.GadgetConsole.GadgetConsoleMessage">
            <summary>
            Represents a particular message in the console.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.GadgetConsoleMessage.Text">
            <summary>
            The text of this message.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.GadgetConsoleMessage.Sender">
            <summary>
            The sender of this message. May be null.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.GadgetConsoleMessage.Severity">
            <summary>
            The severity of this message.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetConsole.GadgetConsoleMessage.Age">
            <summary>
            The age, in seconds, of this message. Only starts incrementing once it has been posted to the console.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetConsole.GadgetConsoleMessage.SendTime">
            <summary>
            The time, in seconds since startup, since that message was sent.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetConsole.GadgetConsoleMessage.Component">
            <summary>
            The <see cref="F:GadgetCore.GadgetConsole.GadgetConsoleMessage.Text"/> component used to display this message in the console. Will be null until the message has been printed.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.GadgetConsoleMessage.#ctor(System.String,System.String,GadgetCore.GadgetConsole.MessageSeverity)">
            <summary>
            Constructs a new message just from the given text.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.GadgetConsoleMessage.GetDisplayedText">
            <summary>
            Builds the resultant text string when considering the severity, sender, and content.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CommandSyntaxError(System.String,System.String)">
            <summary>
            Generates a <see cref="T:GadgetCore.GadgetConsole.GadgetConsoleMessage"/> representative of a standard command syntax error. Return this when the user uses your command wrong.
            Pass args[0] to <paramref name="command"/> to cause the error to display the alias that the user used.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetConsole.CoreCommands">
            <summary>
            This class contains all of the standard GadgetCore commands.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Help(System.String,System.String[])">
            <summary>
            The /help command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Op(System.String,System.String[])">
            <summary>
            The /op command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Deop(System.String,System.String[])">
            <summary>
            The /deop command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Give(System.String,System.String[])">
            <summary>
            The /give command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.GiveChip(System.String,System.String[])">
            <summary>
            The /givechip command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.GiveExp(System.String,System.String[])">
            <summary>
            The /giveexp command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.GivePortals(System.String,System.String[])">
            <summary>
            The /giveportals command
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.ReloadMod(System.String,System.String[])">
            <summary>
            The /reloadmod command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.ReloadGadget(System.String,System.String[])">
            <summary>
            The /reloadgadget command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.DebugMode(System.String,System.String[])">
            <summary>
            The /debugmode command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.GitHubLogin(System.String,System.String[])">
            <summary>
            The /githublogin command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.SpawnEntity(System.String,System.String[])">
            <summary>
            The /spawnentity command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.GodMode(System.String,System.String[])">
            <summary>
            The /godmode command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Execute(System.String,System.String[])">
            <summary>
            The /execute command.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetConsole.CoreCommands.Reflect(System.String,System.String[])">
            <summary>
            The /reflect command.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetConsole.MessageSeverity">
            <summary>
            Used to indicate the severity of a GadgetConsole message.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.MessageSeverity.RAW">
            <summary>
            Don't show a severity tag for this message.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.MessageSeverity.INFO">
            <summary>
            The message is simply informational. The default severity.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.MessageSeverity.WARN">
            <summary>
            The message is a warning.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.MessageSeverity.ERROR">
            <summary>
            The message is indicitive of an error. Used for reporting mod exceptions.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetConsole.MessageSeverity.DEBUG">
            <summary>
            The message is for debugging purposes only, and shouldn't be shown by default.
            </summary>
        </member>
        <member name="T:GadgetCore.CoreMod.GadgetCoreMod">
            <summary>
            This is the internal Gadget used by GadgetCore for adding relevant (optional) features.
            </summary>
        </member>
        <member name="F:GadgetCore.CoreMod.GadgetCoreMod.crafterItem">
            <summary>
            The item for the Universal Crafter
            </summary>
        </member>
        <member name="F:GadgetCore.CoreMod.GadgetCoreMod.crafterTile">
            <summary>
            The tile for the Universal Crafter
            </summary>
        </member>
        <member name="M:GadgetCore.CoreMod.GadgetCoreMod.Initialize">
            <summary>
            Called during gadget initialization. All data registration should be done from this method.
            </summary>
        </member>
        <member name="M:GadgetCore.CoreMod.GadgetCoreMod.Unload">
            <summary>
            Called when this gadget is unloaded or reloaded. 
            </summary>
        </member>
        <member name="M:GadgetCore.CoreMod.GadgetCoreMod.GetModDescription">
            <summary>
            Returns this mod's description.
            </summary>
        </member>
        <member name="M:GadgetCore.CoreMod.GadgetCoreMod.GetDesc">
            <summary>
            Returns GadgetCore's description.
            </summary>
        </member>
        <member name="T:GadgetCore.CoroutineHooker">
            <summary>
            A simple object that always persists in the scene, ideal for attaching coroutines to.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine on the singleton object.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StartCoroutine(System.String)">
            <summary>
            Starts a coroutine on the singleton object.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StartCoroutine(System.String,System.Object)">
            <summary>
            Starts a coroutine on the singleton object.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StopCoroutine(System.String)">
            <summary>
            Stops a coroutine on the singleton object.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops a coroutine on the singleton object.
            </summary>
        </member>
        <member name="M:GadgetCore.CoroutineHooker.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops a coroutine on the singleton object.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetCoreConfig">
            <summary>
            Class used for management of Gadget Core's config.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetCoreConfig.configVersion">
            <summary>
            The current version of Gadget Core's config.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.BetterDroidHover">
            <summary>
            Whether to use the standard hover box for droids, rather than the text-based description.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.MaxConnections">
            <summary>
            The maximum connections allowed when hosting a game. This value is irrelevant if we are the client, not the host.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.UseUPnP">
            <summary>
            Whether to use UPnP to bypass the need for port-forwarding to play over the internet. Not all routers support this. This value is irrelevant if we are the client, not the host.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.ConsoleKey">
            <summary>
            The key used to open the console.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.MaxBackups">
            <summary>
            The maximum number of save backups to keep at any one time.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetCoreConfig.MaxLogArchives">
            <summary>
            The maximum number of log archives to keep at any one time.
            </summary>
        </member>
        <member name="T:GadgetCore.IGadgetCoreLib">
            <summary>
            Interface used by Gadget Core Lib.
            </summary>
        </member>
        <member name="M:GadgetCore.IGadgetCoreLib.ProvideLogger(GadgetCore.GadgetLogger)">
            <summary>
            Used to give a GadgetLogger instance to GadgetCoreLib. Used by Gadget Core to provide access to its logger.
            </summary>
        </member>
        <member name="M:GadgetCore.IGadgetCoreLib.ForwardPort(System.Int32)">
            <summary>
            Attempts to forward the given port using UPnP. Is a coroutine, so should be treated as such.
            </summary>
        </member>
        <member name="M:GadgetCore.IGadgetCoreLib.DecryptUMFModFile(Ionic.Zip.ZipFile)">
            <summary>
            Decrypts the given .umfmod <see cref="T:Ionic.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetHookScript">
            <summary>
            This component is used to hook a Gadget into Unity's update cycle.
            </summary>
        </member>
        <member name="P:GadgetCore.GadgetHookScript.Mod">
            <summary>
            The GadgetInfo that is updated by this hook script.
            </summary>
        </member>
        <member name="T:GadgetCore.GadgetLogger">
            <summary>
            Class used for mod-specific logging.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetLogger.LogName">
            <summary>
            The name of this log file.
            </summary>
        </member>
        <member name="F:GadgetCore.GadgetLogger.LoggerName">
            <summary>
            The name of this loggger.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.#ctor(System.String,System.String)">
            <summary>
            Creates a new GadgetLogger instance.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.LogConsole(System.Object,GadgetCore.GadgetConsole.MessageSeverity)">
            <summary>
            Logs a line of text to both the in-game console, as well as the log file.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.Log(System.Object)">
            <summary>
            Logs an informational line of text into the log file.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.LogWarning(System.Object,System.Boolean)">
            <summary>
            Logs a warning as a line of text into the log file.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.LogError(System.Object,System.Boolean)">
            <summary>
            Logs an error as a line of text into the log file.
            </summary>
        </member>
        <member name="M:GadgetCore.GadgetLogger.Dispose">
            <summary>
            Disposes the internal <see cref="T:System.IO.StreamWriter"/> used by this logger.
            </summary>
        </member>
        <member name="P:GadgetCore.KeybindToggle.Binding">
            <summary>
            Whether a binding operation is currently in progress.
            </summary>
        </member>
        <member name="T:GadgetCore.Loader.GadgetLoader">
            <summary>
            Class used for loading <see cref="T:GadgetCore.Loader.GadgetMod"/>s. The average Gadget should have no reason to interface with this.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetLoader.EmptyMods">
            <summary>
            List of <see cref="T:GadgetCore.Loader.GadgetMod"/>s that failed to load because they don't contain any <see cref="T:GadgetCore.API.Gadget"/>s.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetLoader.IncompatibleMods">
            <summary>
            List of <see cref="T:GadgetCore.Loader.GadgetMod"/>s that failed to load because they are incompatible with this version of GadgetCore, or that are missing a required dependency on another mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetLoader.ErroredMods">
            <summary>
            List of mod names that failed to load because they threw an error during assembly load. (Probably a missing assembly reference that wasn't mentioned in the manifest metadata)
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.LoadModDir(System.String)">
            <summary>
            Loads and registers the <see cref="T:GadgetCore.Loader.GadgetMod"/> represented by the given directory. Will log a warning and return null if the given directory is not a valid <see cref="T:GadgetCore.Loader.GadgetMod"/>. Will also add the name to <see cref="F:GadgetCore.Loader.GadgetLoader.ErroredMods"/> if the directory was valid, but an error occured during the mod-loading process.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.LoadModFile(System.String)">
            <summary>
            Loads and registers the <see cref="T:GadgetCore.Loader.GadgetMod"/> represented by the given file. Will log a warning and return null if the given file is not a valid <see cref="T:GadgetCore.Loader.GadgetMod"/>. Will also add the name to <see cref="F:GadgetCore.Loader.GadgetLoader.ErroredMods"/> if the file was valid, but an error occured during the mod-loading process.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.UnloadMod(GadgetCore.Loader.GadgetMod)">
            <summary>
            Unloads the given GadgetMod.
            Cannot fully release the mod's RAM usage, as the old instance of the mod assembly that is stored in RAM cannot be fully removed.
            WARNING: Will trigger an immediate garbage collection, causing a short freeze!
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.RefreshMod(GadgetCore.Loader.GadgetMod@)">
            <summary>
            Soft-reloads the given GadgetMod. (Does not load it freshly from the disk).
            Also refreshes all mods that are dependent on this mod.
            Be warned that this only reloads the mod's <see cref="T:GadgetCore.API.Gadget"/> instances, so some mods may not function as expected after a refresh.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.RefreshMod(GadgetCore.Loader.GadgetMod)">
            <summary>
            Soft-reloads the given GadgetMod. (Does not load it freshly from the disk).
            Also refreshes all Gadgets that are dependent on these Gadgets.
            Be warned that this only reloads the mod's <see cref="T:GadgetCore.API.Gadget"/> instances, so some mods may not function as expected after a refresh.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.ReloadMod(GadgetCore.Loader.GadgetMod@)">
            <summary>
            Hard-reloads the given GadgetMod. (Loads it freshly from the disk).
            Also reloads all mods that are dependent on this mod.
            Causes a permanent increase in the game's RAM usage, as the old instance of the mod assembly that is stored in RAM cannot be fully removed.
            WARNING: Will trigger an immediate GC collection, causing a short freeze!
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.ReloadMod(GadgetCore.Loader.GadgetMod)">
            <summary>
            Hard-reloads the given GadgetMod. (Loads it freshly from the disk).
            Also reloads all mods that are dependent on this mod.
            Causes a permanent increase in the game's RAM usage, as the old instance of the mod assembly that is stored in RAM cannot be fully removed.
            WARNING: Will trigger an immediate GC collection, causing a short freeze!
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetLoader.CompareVersionNumbers(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Compares two arrays representing sets of version numbers.
            Returns a positive value if <paramref name="firstNums"/> is greater/newer,
            Returns a negative value if <paramref name="secondNums"/> is greater/newer,
            and 0 if the two sets of version numbers are equivalent.
            </summary>
        </member>
        <member name="T:GadgetCore.Loader.GadgetMod">
            <summary>
            The container class used for tracking a Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.Name">
            <summary>
            The name of this Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.ModPath">
            <summary>
            The path to this Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.Version">
            <summary>
            The version of this Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.Manifest">
            <summary>
            The manifest ini of this Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.Assembly">
            <summary>
            The <see cref="T:System.Reflection.Assembly"/> of this Gadget Mod.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.IsArchive">
            <summary>
            Indicates whether this mod is contained within a .zip archive.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.ModDependencies">
            <summary>
            The list of other-mod dependencies needed by this Gadget Mod. This is comes from the "Dependencies" value in the mod's manifest.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetMod.AssemblyDependencies">
            <summary>
            The list of assembly dependencies needed by this Gadget Mod. Some may be optional.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetMod.LoadedGadgets">
            <summary>
            The list of all loaded Gadgets contained within this Gadget Mod.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetMod.UnloadedGadgets">
            <summary>
            The list of all unloaded Gadgets contained within this Gadget Mod.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetMod.IsLoaded">
            <summary>
            Indicates whether this mod is currently loaded. If not, access to any other members of this class is undefined behavior.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetMod.Enabled">
            <summary>
            Indicates whether this mod is enabled. If not, all contained gadgets are disabled and all Harmony patches are not run.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMod.ReadModFile(System.String)">
            <summary>
            Returns a Stream for reading a file contained within a Gadget Mod.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMod.GetModFile(System.String)">
            <summary>
            Gets a temporary reference to a file contained within a Gadget Mod. Make sure to call <see cref="M:GadgetCore.Loader.GadgetModFile.Dispose"/> when you are done with it. Do not call this again before disposing of the previous instance of <see cref="T:GadgetCore.Loader.GadgetModFile"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMod.ListModFiles(System.String)">
            <summary>
            Lists all mod files in the given mod directory. The returned values are relative paths that can be used by <see cref="M:GadgetCore.Loader.GadgetMod.GetModFile(System.String)"/> or <see cref="M:GadgetCore.Loader.GadgetMod.ReadModFile(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMod.ListModDirectories(System.String)">
            <summary>
            Lists all child mod directories of the given mod directory. Note that this will not return empty directories. The returned values are relative paths that can be used by <see cref="M:GadgetCore.Loader.GadgetMod.ListModFiles(System.String)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMod.HasModFile(System.String)">
            <summary>
            Checks if this mod contains the file with the given path.
            </summary>
        </member>
        <member name="T:GadgetCore.Loader.GadgetModFile">
            <summary>
            A temporary reference to a file contained with a Gadget Mod. Since it is a temporary reference, you should call <see cref="M:GadgetCore.Loader.GadgetModFile.Dispose"/> once you are done with it. Be aware that you should never write to this file.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetModFile.FilePath">
            <summary>
            The path to the file.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetModFile.IsArchivedFile">
            <summary>
            Indicates whether this file is contained within a .zip archive.
            </summary>
        </member>
        <member name="F:GadgetCore.Loader.GadgetModFile.Mod">
            <summary>
            The <see cref="T:GadgetCore.Loader.GadgetMod"/> that contains this file.
            </summary>
        </member>
        <member name="P:GadgetCore.Loader.GadgetModFile.Disposed">
            <summary>
            Indicates whether this GadgetModFile has been disposed. If so, know that <see cref="P:GadgetCore.Loader.GadgetModFile.FilePath"/> is no longer valid.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetModFile.ReadAllLines">
            <summary>
            Reads all lines of the file.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetModFile.ReadAllText">
            <summary>
            Reads all text of the file.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetModFile.ReadAllBytes">
            <summary>
            Reads all bytes of the file.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetModFile.Dispose">
            <summary>
            Disposes of this temporary file reference.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetModFile.DisposeOnCondition(System.Func{System.Boolean})">
            <summary>
            Disposes of this temporary file reference after a certain condition is fulfilled.
            </summary>
        </member>
        <member name="T:GadgetCore.Loader.GadgetMods">
            <summary>
            Main class for accessing and managing loaded <see cref="T:GadgetCore.Loader.GadgetMod"/>s
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.GetModByName(System.String)">
            <summary>
            Gets the GadgetMod with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.GetModByPath(System.String)">
            <summary>
            Gets the GadgetMod with the given path.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.GetModByAssembly(System.Reflection.Assembly)">
            <summary>
            Gets the GadgetMod with the given assembly.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.ListAllMods(System.Boolean)">
            <summary>
            Lists all GadgetMods.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.ListAllModNames(System.Boolean)">
            <summary>
            Lists the names of all GadgetMods.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.IndexOfMod(GadgetCore.Loader.GadgetMod)">
            <summary>
            Finds the index of the given mod in the list of all mods.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.SetEnabled(System.String,System.Boolean)">
            <summary>
            Sets the Enabled status of the gadget with the given name using <see cref="M:GadgetCore.Loader.GadgetMods.GetModByName(System.String)"/>. Will throw a NullReferenceException if there is no mod with the given name.
            </summary>
        </member>
        <member name="M:GadgetCore.Loader.GadgetMods.SetEnabled(GadgetCore.Loader.GadgetMod,System.Boolean)">
            <summary>
            Sets the Enabled status of the given mod. Note that this can be queried using GadgetMod.Enabled
            </summary>
        </member>
        <member name="F:GadgetCore.ModBrowser.PASCAL_CASE_SPACING_REGEX">
            <summary>
            Regex for inserting spaces into PascalCase strings.
            </summary>
        </member>
        <member name="M:GadgetCore.ModBrowser.ToggleModBrowser">
            <summary>
            Toggles the mod browser. Only works if the mod menu is open.
            Returns true if the mod browser is now open. (Assuming the mod menu is open).
            </summary>
        </member>
        <member name="M:GadgetCore.ModBrowser.OpenModBrowser">
            <summary>
            Opens the mod browser. Only works if the mod menu is open.
            </summary>
        </member>
        <member name="M:GadgetCore.ModBrowser.CloseModBrowser">
            <summary>
            Closes the mod browser.
            </summary>
        </member>
        <member name="T:GadgetCore.ModMenuEntry">
            <summary>
            Represents an entry in the mod menu. Can be relevant when working with config menus.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntry.Name">
            <summary>
            The name of this entry.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntry.Type">
            <summary>
            The type of this entry.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntry.Description">
            <summary>
            The description of this entry.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntry.Info">
            <summary>
            A dictionary filled with extra information about this entry.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntry.Gadgets">
            <summary>
            The <see cref="T:GadgetCore.API.GadgetInfo"/>s from the mod represented by this entry.
            </summary>
        </member>
        <member name="T:GadgetCore.ModMenuEntryType">
            <summary>
            Represents the type of entry that a <see cref="T:GadgetCore.ModMenuEntry"/> represents.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.GADGET">
            <summary>
            A Gadget mod that loaded succesfully and contains at least one Gadget.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.EMPTY_GADGET">
            <summary>
            A Gadget mod that didn't load because it doesn't contain any Gadgets.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.INCOMPATIBLE_GADGET">
            <summary>
            A Gadget mod that didn't load because it is missing required dependencies.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.ERRORED_GADGET">
            <summary>
            A Gadget mod that didn't load due to an error in its load process.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.UMF">
            <summary>
            A UMF mod that may or may not contain Gadgets.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.DISABLED_UMF">
            <summary>
            A UMF mod that is disabled. May contain Gadgets, although they will not be known.
            </summary>
        </member>
        <member name="F:GadgetCore.ModMenuEntryType.INCOMPATIBLE_UMF">
            <summary>
            A UMF mod that didn't load because of an assembly reference that failed to resolve.
            </summary>
        </member>
        <member name="T:GadgetCore.Patches.Patch_Type_GetMethod">
            <summary>
            Dirty hack, nothing to see here...
            </summary>
        </member>
        <member name="T:GadgetCore.PatchMethods">
            <summary>
            Provides utility methods used by GadgetCore's patches. You probably shouldn't use these yourself.
            </summary>
        </member>
        <member name="M:GadgetCore.PatchMethods.HoverItem(Item)">
            <summary>
            Displays the item-hover window on the cursor. For some reason, the base game has six different methods that all pretty much just do this.
            </summary>
        </member>
        <member name="M:GadgetCore.PatchMethods.RecalculateGearStats(Item[])">
            <summary>
            Completely recalculates GameScript.GEARSTAT from your equipped gear.
            </summary>
        </member>
        <member name="M:GadgetCore.PatchMethods.PlanetIsTownOnly(System.Int32)">
            <summary>
            Returns whether the given planet consists entirely of town zone(s)
            </summary>
        </member>
        <member name="T:GadgetCore.Util.ComparisonComparer`1">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that uses a <see cref="T:System.Comparison`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new <see cref="T:GadgetCore.Util.ComparisonComparer`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ComparisonComparer`1.Equals(`0,`0)">
            <summary>
            Performs comparison of two objects of the same type and determines if they can be considered equal by the comparison.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ComparisonComparer`1.GetHashCode(`0)">
            <summary>
            Calls T's GetHashCode.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.DebugTricks">
            <summary>
            Contains utility methods intended for debugging, perhaps through the /reflect command
            </summary>
        </member>
        <member name="M:GadgetCore.Util.DebugTricks.ListNetworkViews">
            <summary>
            Lists all NetworkViews, their IDs, and their names in the console.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.DebugTricks.SpawnRandomItem">
            <summary>
            Spawns a random modded item into the world using <see cref="M:GadgetCore.API.GadgetCoreAPI.SpawnItem(UnityEngine.Vector3,Item,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:GadgetCore.Util.DelegateTraceListener">
            <summary>
            A trace listener that routes messages to a given <see cref="T:System.Action"/>&lt;<see cref="T:System.String"/>&gt;.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.DelegateTraceListener.#ctor(System.Action{System.String})">
            <summary>
            Constructs a new DelegateTraceListener.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.DelegateTraceListener.Write(System.String)">
            <summary>
            Sends a string to this DelegateTraceListener's action delegate.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.DelegateTraceListener.WriteLine(System.String)">
            <summary>
            Sends a line to this DelegateTraceListener's action delegate.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.ExtensionUtils">
            <summary>
            Provides miscellaneous extension methods.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.ReplaceComponent``2(UnityEngine.GameObject)">
            <summary>
            Replaces one component with another on a <see cref="T:UnityEngine.GameObject"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.ReplaceComponent(UnityEngine.GameObject,System.Type,System.Type)">
            <summary>
            Replaces one component with another on a <see cref="T:UnityEngine.GameObject"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.Concat(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the strings in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> together. Uses ", " as the seperator if one is not explicitly specified.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Concatenates the objects in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> together. Uses ", " as the seperator if one is not explicitly specified.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.RecursiveConcat``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Object,System.String},System.String)">
            <summary>
            Recursively concatenates the objects in the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> together. Uses ", " as the seperator if one is not explicitly specified.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the given predicate, returns -1 if it is not found.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a given <see cref="T:System.Action"/> for each entry in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Executes a given <see cref="T:System.Action"/> for each entry in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.IsSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0})">
            <summary>
            Checks if the list has the given sublist at the specified index.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.IndexOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0})">
            <summary>
            Finds the index of the first instance of a sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.LastIndexOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0})">
            <summary>
            Finds the index of the last instance of a sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.AllIndexesOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0})">
            <summary>
            Finds the indexes of all instances of the sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.IsSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0}[])">
            <summary>
            Checks if the list has the given sublist at the specified index.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.IndexOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0}[])">
            <summary>
            Finds the index of the first instance of a sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.LastIndexOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0}[])">
            <summary>
            Finds the index of the last instance of a sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.AllIndexesOfSublist``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,GadgetCore.Util.EqualityComparison{``0}[])">
            <summary>
            Finds the indexes of all instances of the sublist within a list.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.GetHighestParent(UnityEngine.GameObject)">
            <summary>
            Returns the highest parent object for this GameObject
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.GetHighestParent(UnityEngine.Transform)">
            <summary>
            Returns the highest parent transform for this Transform
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ExtensionUtils.StartCoroutineDelayed(UnityEngine.MonoBehaviour,System.Collections.IEnumerator,System.Single)">
            <summary>
            Starts a coroutine after a delay
            </summary>
        </member>
        <member name="T:GadgetCore.Util.EqualityComparison`1">
            <summary>
            A <see cref="T:System.Comparison`1"/> that only checks for equality.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.MultiTreeList`1">
            <summary>
            Represents a tree-like data structure where the nodes can have multiple parents.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.MultiTreeList`1.Value">
            <summary>
            The value of this tree node.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.MultiTreeList`1.Parents">
            <summary>
            The parents of this tree node.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.MultiTreeList`1.m_Parents">
            <summary>
            The parents of this tree node. Mutable, unless <see cref="P:GadgetCore.Util.MultiTreeList`1.IsReadOnly"/>
            </summary>
        </member>
        <member name="F:GadgetCore.Util.MultiTreeList`1.Nodes">
            <summary>
            The child nodes of this node.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.MultiTreeList`1.Count">
            <summary>
            Gets the number of child nodes to this node.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.MultiTreeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this <see cref="T:GadgetCore.Util.MultiTreeList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.MultiTreeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified index.
            </summary>
            <param name="index">The zero-based index of the node to get or set.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0, or index is equal to or greater than <see cref="P:GadgetCore.Util.MultiTreeList`1.Count"/>.</exception>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.#ctor(`0,GadgetCore.Util.MultiTreeList{`0}[])">
            <summary>
            Constructs a new node with the given value.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IEnumerable{`0}},`0)">
            <summary>
            Constructs a <see cref="T:GadgetCore.Util.MultiTreeList`1"/> from a dictionary representative of the relationships between values. The keys are parents, and the values are children.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Contains(`0)">
            <summary>
            Checks if the given value is contained anywhere in the tree.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Find(`0)">
            <summary>
            Finds the first node containing the specified value. Returns null if the value is nowhere in the tree.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FindAll(`0)">
            <summary>
            Finds all nodes containing the specified value. Returns an empty list if the value is nowhere in the tree.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.ListAllNodes">
            <summary>
            Lists all nodes that are this node's children, including this node itself.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Sort(System.Comparison{GadgetCore.Util.MultiTreeList{`0}})">
            <summary>
            Sorts the children of this node.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.GetTopLevelParents">
            <summary>
            Gets all top-level parents to this node.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.GetTopLevelParent(`0)">
            <summary>
            Gets the one and only top-level parent of this tree. If there are multiple, creates a new top-level parent and adds the previous top-level parents as children to the new one.
            </summary>
            <param name="topLevelValue">The value for the new top-level parent to have, if one is created.</param>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.MakeReadOnly">
            <summary>
            Makes this <see cref="T:GadgetCore.Util.MultiTreeList`1"/> read-only. This is a permanent operation, it cannot be undone.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenByDepth">
            <summary>
            Flattens the tree into the form of a list, depth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenInternalByDepth(System.Collections.Generic.List{`0})">
            <summary>
            A recursive function used for flattening the tree, depth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenUniqueByDepth">
            <summary>
            Flattens the tree into the form of a list of unique values, depth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenUniqueInternalByDepth(System.Collections.Generic.List{`0})">
            <summary>
            A recursive function used for flattening the unique values of the tree, depth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenByBreadth">
            <summary>
            Flattens the tree into the form of a list, breadth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenInternalByBreadth(System.Collections.Generic.List{`0},System.Collections.Generic.IList{GadgetCore.Util.MultiTreeList{`0}})">
            <summary>
            A recursive function used for flattening the tree, breadth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenUniqueByBreadth">
            <summary>
            Flattens the tree into the form of a list of unique values, breadth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.FlattenUniqueInternalByBreadth(System.Collections.Generic.List{`0},System.Collections.Generic.IList{GadgetCore.Util.MultiTreeList{`0}})">
            <summary>
            A recursive function used for flattening the unique values of the tree, breadth-first.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.IndexOf(GadgetCore.Util.MultiTreeList{`0})">
            <summary>
            Searches for the specified child node and returns the zero-based index of the first occurrence within the child nodes.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Insert(System.Int32,GadgetCore.Util.MultiTreeList{`0})">
            <summary>
            Inserts a node into this <see cref="T:GadgetCore.Util.MultiTreeList`1"/> at the specified index.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.RemoveFromTree(System.Boolean,System.Boolean)">
            <summary>
            Removes this node from the tree.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index in the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Add(GadgetCore.Util.MultiTreeList{`0})">
            <summary>
            Adds a node to the end of the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Clear">
            <summary>
            Removes all nodes from the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Contains(GadgetCore.Util.MultiTreeList{`0})">
            <summary>
            Determines whether a node is in the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.CopyTo(GadgetCore.Util.MultiTreeList{`0}[],System.Int32)">
            <summary>
            Copes the children of this <see cref="T:GadgetCore.Util.MultiTreeList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.Remove(GadgetCore.Util.MultiTreeList{`0})">
            <summary>
            Removes the first occurance of a specific node from the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GadgetCore.Util.MultiTreeList`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GadgetCore.Util.MultiTreeList`1.ToString">
            <summary>
            Converts this <see cref="T:GadgetCore.Util.MultiTreeList`1"/> into a human-readable string representation
            </summary>
        </member>
        <member name="T:GadgetCore.Util.ObjImporter">
            <summary>
            Obj format mesh importer. You should probably use <see cref="M:GadgetCore.API.GadgetCoreAPI.LoadObjMesh(System.String)"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ObjImporter.ImportMesh(System.String)">
            <summary>
            Imports a mesh from the raw string content of an obj mesh file.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.ReflectionUtils">
            <summary>
            Provides the extension method 'InvokeMethod' for easily invoking methods with Reflection.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.ReflectionUtils.ALL_BF">
            <summary>
            Const value representative of the combination of the four standard <see cref="T:System.Reflection.BindingFlags"/> uses for getting class members:
            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.IsStatic(System.Reflection.MemberInfo)">
            <summary>
            Determines if this <see cref="T:System.Reflection.MemberInfo"/> is static.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetGetType(System.Reflection.MemberInfo)">
            <summary>
            Gets the Type of the value that would be returned by <see cref="M:GadgetCore.Util.ReflectionUtils.GetValue(System.Reflection.MemberInfo,System.Object)"/> for this <see cref="T:System.Reflection.MemberInfo"/>.
            Returns null if <see cref="M:GadgetCore.Util.ReflectionUtils.GetValue(System.Reflection.MemberInfo,System.Object)"/> cannot function for this <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetSetType(System.Reflection.MemberInfo)">
            <summary>
            Gets the Type of the value that is required by <see cref="M:GadgetCore.Util.ReflectionUtils.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)"/> for this <see cref="T:System.Reflection.MemberInfo"/>.
            Returns null if <see cref="M:GadgetCore.Util.ReflectionUtils.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)"/> cannot function for this <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Attempts to get a value from this <see cref="T:System.Reflection.MemberInfo"/> from the given <paramref name="obj"/>.
            Can only work with Fields, Methods with a return value, and Properties with a getter. For methods, all parameters are passed their default values.
            If retrieving a value from the member is not possible, simply returns <paramref name="memberInfo"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Attempts to set a value to this <see cref="T:System.Reflection.MemberInfo"/> from the given <paramref name="obj"/>.
            Can only work with Fields, Methods with a single parameter, and Properties with a setter.
            Returns a value indicating whether the assignment was possible.
            Throws an <see cref="T:System.ArgumentException"/> if value Type is not assignable to member Type.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetValue``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets the value of this <see cref="T:System.Reflection.FieldInfo"/>. Uses caching with <see cref="M:GadgetCore.Util.ReflectionUtils.CreateGetter(System.Reflection.FieldInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets the value of this <see cref="T:System.Reflection.FieldInfo"/>. Uses caching with <see cref="M:GadgetCore.Util.ReflectionUtils.CreateGetter(System.Reflection.FieldInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.SetValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Sets the value of this <see cref="T:System.Reflection.FieldInfo"/>. Uses caching with <see cref="M:GadgetCore.Util.ReflectionUtils.CreateSetter(System.Reflection.FieldInfo)"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetFieldValue``1(System.Object,System.String)">
            <summary>
            Gets the value of a field with the specified name and parameters.
            </summary>
            <param name="type">The object instance to invoke upon.</param>
            <param name="fieldName">The name of the field to read from.</param>
            <returns>The value contained within the field.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.GetFieldValue(System.Object,System.String)">
            <summary>
            Gets the value of a field with the specified name and parameters.
            </summary>
            <param name="type">The object instance to read from.</param>
            <param name="fieldName">The name of the field to read from.</param>
            <returns>The value contained within the field.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a field with the specified name and parameters.
            </summary>
            <param name="type">The object instance to write to.</param>
            <param name="fieldName">The name of the field to write to.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method with the specified name and parameters.
            </summary>
            <param name="type">The object instance to invoke upon.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters to run the method with.</param>
            <returns>The value returned by the invoked method.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.InvokeMethod``1(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the method with the specified name and parameters.
            </summary>
            <param name="type">The object instance to invoke upon.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="generics">The generic types that the target method uses</param>
            <param name="parameters">The parameters to run the method with.</param>
            <returns>The value returned by the invoked method.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method with the specified name and parameters.
            </summary>
            <param name="type">The object instance to invoke upon.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters to run the method with.</param>
            <returns>The value returned by the invoked method.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the method with the specified name and parameters.
            </summary>
            <param name="type">The object instance to invoke upon.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="generics">The generic types that the target method uses</param>
            <param name="parameters">The parameters to run the method with.</param>
            <returns>The value returned by the invoked method.</returns>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a getter for the given FieldInfo, allowing you to repeatedly get its value without repeated calls to GetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a getter for the given FieldInfo, allowing you to repeatedly get its value without repeated calls to GetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a getter for the given FieldInfo, allowing you to repeatedly get its value without repeated calls to GetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateStaticGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a getter for the given static FieldInfo, allowing you to repeatedly get its value without repeated calls to GetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateStaticGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a getter for the given static FieldInfo, allowing you to repeatedly get its value without repeated calls to GetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for the given FieldInfo, allowing you to repeatedly set its value without repeated calls to SetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for the given FieldInfo, allowing you to repeatedly set its value without repeated calls to SetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for the given FieldInfo, allowing you to repeatedly set its value without repeated calls to SetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateStaticSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for the given static FieldInfo, allowing you to repeatedly set its value without repeated calls to SetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateStaticSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a setter for the given static FieldInfo, allowing you to repeatedly set its value without repeated calls to SetValue
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateInvoker``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates an invoker delegate for the given MethodInfo, allowing you to repeatedly invoke it without repeated calls to MethodInfo's Invoke method.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ReflectionUtils.CreateInvoker(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates an invoker delegate for the given MethodInfo, allowing you to repeatedly invoke it without repeated calls to MethodInfo's Invoke method.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.Reflector">
            <summary>
            Reflection utility used by the /reflect command.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ReadValue(System.String,System.String)">
            <summary>
            Reads the specified member or reference's value as a string.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.WriteValue(System.String,System.String,System.String)">
            <summary>
            Attempts to write the specified member or reference's value as a string. <paramref name="value"/> can be a literal value, or a reference.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.Invoke(System.String,System.String,System.String[])">
            <summary>
            Attempts to invoke a method or property with an array of args as strings.
            Returns "void" if invoked method has a return type of void.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.InvokeReturn(System.String,System.String,System.String,System.String[])">
            <summary>
            Attempts to invoke a method or property with an array of args as strings, and stores the return value at a given target.
            Returns "void" if invoked method has a return type of void.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.UseNamespace(System.String)">
            <summary>
            'Uses' a namespace, thereby simplifying the use of <see cref="M:GadgetCore.Util.Reflector.ResolveType(System.String)"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.UnuseNamespace(System.String)">
            <summary>
            'Unuses' a namespace, potentially resolving name conflicts with the use of <see cref="M:GadgetCore.Util.Reflector.ResolveType(System.String)"/>.
            Also removes cached type resolutions from this namespace, even if this namespace was not previously 'Used'.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ResolveType(System.String)">
            <summary>
            Resolves a type using an identifier.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ResolveMember(System.String)">
            <summary>
            Resolves a member using an identifier
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ResolveReference(System.String,System.String,System.String)">
            <summary>
            Resolves a reference using an identifier, an optional reference to the container object if referencing a member identifier,
            and an optional name to save the reference as in that case.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.Reflector.ReflectorException">
            <summary>
            The only exception that should ever be thrown by the Reflector. Will contain a message clearly explaining the problem.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ReflectorException.#ctor(System.String)">
            <summary>
            Constructs a new ReflectorException
            </summary>
        </member>
        <member name="M:GadgetCore.Util.Reflector.ReflectorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new ReflectorException
            </summary>
        </member>
        <member name="T:GadgetCore.Util.ThreadedWatcher`1">
            <summary>
            Uses a dedicated thread to watch for changes in the value of a field.
            </summary>
            <typeparam name="T">The type of the value being watched</typeparam>
        </member>
        <member name="M:GadgetCore.Util.ThreadedWatcher`1.#ctor(System.Reflection.FieldInfo,System.Object,System.Func{`0,`0,System.Boolean},System.Int32,System.Collections.Generic.EqualityComparer{`0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Constructs and initiates a new <see cref="T:GadgetCore.Util.ThreadedWatcher`1"/>. Use <see cref="M:GadgetCore.Util.ThreadedWatcher`1.Kill"/>, or return false from the <paramref name="listener"/>, to stop.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ThreadedWatcher`1.#ctor(System.Func{System.Object,`0},System.Object,System.Func{`0,`0,System.Boolean},System.Int32,System.Collections.Generic.EqualityComparer{`0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Constructs and initiates a new <see cref="T:GadgetCore.Util.ThreadedWatcher`1"/>. Use <see cref="M:GadgetCore.Util.ThreadedWatcher`1.Kill"/>, or return false from the <paramref name="listener"/>, to stop.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ThreadedWatcher`1.#ctor(System.Func{`0},System.Func{`0,`0,System.Boolean},System.Int32,System.Collections.Generic.EqualityComparer{`0},System.Func{System.Exception,System.Boolean})">
            <summary>
            Constructs and initiates a new <see cref="T:GadgetCore.Util.ThreadedWatcher`1"/>. Use <see cref="M:GadgetCore.Util.ThreadedWatcher`1.Kill"/>, or return false from the <paramref name="listener"/>, to stop.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ThreadedWatcher`1.Kill">
            <summary>
            Permanently kills this watcher.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.ThreadedWatcher`1.IsLive">
            <summary>
            Returns whether this watcher is currently live.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.TopoSort">
            <summary>
            Utility class for performing topological sorts.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TopoSort.Sort``1(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Topologically sorts the given dictionary of values and dependencies using Kahn's algorithm. Returns null if there are any cyclic dependencies.
            </summary>
            <returns>Sorted values</returns>
        </member>
        <member name="T:GadgetCore.Util.TranspilerHelper">
            <summary>
            Offers utility functions for making Transpilers.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.DumpInstructions(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Int32,System.Int32)">
            <summary>
            Dumps the given <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s as a string,
            optionally with a given starting instruction index and count of instructions to print.
            lines are seperated by the \n character.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.GetOperandSize(HarmonyLib.CodeInstruction)">
            <summary>
            Returns the size, in bytes, of the given <see cref="T:HarmonyLib.CodeInstruction"/>'s operand.
            The size of a complete CodeInstruction is this + <paramref name="insn"/>.opcode.Size.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.GetReverseConditionalCode(System.Reflection.Emit.OpCode)">
            <summary>
            Returns the opcode with the reverse conditional behavior as the one given, I.E. ble instead of bgt.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CreateProcessor(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator)">
            <summary>
            Creates a new <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor"/> based upon the given instructions.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.TranspilerHelper.CILProcessor">
            <summary>
            Represents a block of <see cref="T:HarmonyLib.CodeInstruction"/>s. Tracks changes, and provides data for various helper functions.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.Insns">
            <summary>
            The workable list of <see cref="T:HarmonyLib.CodeInstruction"/>s
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.BaseInsns">
            <summary>
            The <see cref="T:HarmonyLib.CodeInstruction"/>s at the moment this analysis was made.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.LabelIndexes">
            <summary>
            Tracks all of the labels in the CodeInstructions, where <see cref="P:GadgetCore.Util.Tuple`2.Item1"/> is the label number, and <see cref="P:GadgetCore.Util.Tuple`2.Item2"/> is the instruction index.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.ILAddresses">
            <summary>
            Contains the addresses of each IL instruction by index.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.ILIndexes">
            <summary>
            Contains the index of each IL instruction by address.
            </summary>
        </member>
        <member name="F:GadgetCore.Util.TranspilerHelper.CILProcessor.ILGen">
            <summary>
            The <see cref="T:System.Reflection.Emit.ILGenerator"/> available for use by this CILProcessor.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.GetRefByIndex(System.Int32)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the given instruction index.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.GetRefByAddress(System.Int32,System.Boolean)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the given instruction address.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.GetRefByOffset(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Int32)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction with its index offset from the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindAllRefsByInsn(HarmonyLib.CodeInstruction)">
            <summary>
            Finds all instructions that match the given instruction's opcode and operand.
            Ignores the instruction's labels and exception blocks.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByInsn(HarmonyLib.CodeInstruction)">
            <summary>
            Finds the first instruction that matches the given instruction's opcode and operand.
            Ignores the instruction's labels and exception blocks.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByInsn(HarmonyLib.CodeInstruction,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the first instruction that matches the given instruction's opcode and operand.
            Ignores the instruction's labels and exception blocks.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByInsn(HarmonyLib.CodeInstruction)">
            <summary>
            Finds the last instruction that matches the given instruction's opcode and operand.
            Ignores the instruction's labels and exception blocks.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByInsn(HarmonyLib.CodeInstruction,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the last instruction that matches the given instruction's opcode and operand.
            Ignores the instruction's labels and exception blocks.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindAllRefsByInsns(System.Collections.Generic.List{HarmonyLib.CodeInstruction})">
            <summary>
            Finds all instructions that match the given instructions' opcodes and operands.
            Ignores the instructions' labels and exception blocks.
            The <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> points to the first instruction in the block.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByInsns(HarmonyLib.CodeInstruction[])">
            <summary>
            Finds the first instruction block that matches the given instructions' opcodes and operands.
            Ignores the instruction's labels and exception blocks.
            The <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> points to the first instruction in the block.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByInsns(HarmonyLib.CodeInstruction[],GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the first instruction block that matches the given instructions' opcodes and operands.
            Ignores the instruction's labels and exception blocks.
            The <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> points to the first instruction in the block.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByInsns(HarmonyLib.CodeInstruction[])">
            <summary>
            Finds the last instruction block that matches the given instructions' opcodes and operands.
            Ignores the instruction's labels and exception blocks.
            The <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> points to the first instruction in the block.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByInsns(HarmonyLib.CodeInstruction[],GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the last instruction block that matches the given instructions' opcodes and operands.
            Ignores the instruction's labels and exception blocks.
            The <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> points to the first instruction in the block.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindAllRefsByOpCode(System.Reflection.Emit.OpCode)">
            <summary>
            Finds all instructions that have the given opcode.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByOpCode(System.Reflection.Emit.OpCode)">
            <summary>
            Finds the first instruction that has the given opcode.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByOpCode(System.Reflection.Emit.OpCode,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the first instruction that has the given opcode.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByOpCode(System.Reflection.Emit.OpCode)">
            <summary>
            Finds the last instruction that has the given opcode.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindLastRefByOpCode(System.Reflection.Emit.OpCode,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Finds the last instruction that has the given opcode.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.FindRefByLabel(System.Reflection.Emit.Label)">
            <summary>
            Finds the instruction with the given label. Returns null if no instruction has the given label.
            Returns the first instruction found with the given label - if multiple instructions have the same label, then that indicates an invalid state.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.DumpInstructions(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Int32)">
            <summary>
            Dumps the instructions of this <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor"/> as a string,
            optionally with a given starting <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> and count of instructions to print.
            lines are seperated by the \n character.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.DumpInstructions(System.Int32,System.Int32)">
            <summary>
            Dumps the instructions of this <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor"/> as a string,
            optionally with a given starting instruction index and count of instructions to print.
            lines are seperated by the \n character.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.GetInsn(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Gets the <see cref="T:HarmonyLib.CodeInstruction"/> referenced by the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.MarkLabel(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Marks a label at the target instruction, for use in branch instructions.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.SimplifyConditionalBranch(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Simplifies needlessly complicated conditional branch structures.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.InjectElseIf(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Reflection.Emit.OpCode,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef@,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef@)">
            <summary>
            Injects an elseif structure onto the end of a specified if block specified by the <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> that is targeting a conditional branch instruction.
            The out <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>s will point to NOPs you can use and/or replace.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.InjectLoadField(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Injects a LDFLD instruction for a field in the same class as this method into the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>.
            Will fail to load a non-static field from a static method, unless the first parameter of the method is an instance of the class.
            If <paramref name="insert"/> is false, it will replace the target instruction.
            If <paramref name="insert"/> is true, then it will insert the new instruction and push forward the instructions at
            and after the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.InjectHook(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Injects a CALL instruction into the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>. If <paramref name="insert"/> is false, it will replace the target instruction.
            If <paramref name="insert"/> is true, then it will insert the new instruction and push forward the instructions at
            and after the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.InjectInsn(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,HarmonyLib.CodeInstruction,System.Boolean)">
            <summary>
            Injects an instruction into the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>. If <paramref name="insert"/> is false, it will replace the target instruction.
            If <paramref name="insert"/> is true, then it will insert the new instruction and push forward the instructions at
            and after the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.InjectInsns(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,HarmonyLib.CodeInstruction[],System.Boolean)">
            <summary>
            Injects a set of instructions into the block started by the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>.
            If <paramref name="insert"/> is false, it will replace the target instructions.
            If <paramref name="insert"/> is true, then it will insert the new instructions and push forward the instructions at
            and after the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.RemoveInsn(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Removes the instruction at the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.RemoveInsns(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Int32)">
            <summary>
            Removes the set of instructions in the block started by the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>.
            Accepts values of <paramref name="count"/> higher than the number of instructions.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.RemoveInsns(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef)">
            <summary>
            Removes the set of instructions in the block started by the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>s.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.GetInstructions">
            <summary>
            Returns the complete list of <see cref="T:HarmonyLib.CodeInstruction"/>s.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.op_Implicit(GadgetCore.Util.TranspilerHelper.CILProcessor)~System.Collections.Generic.List{HarmonyLib.CodeInstruction}">
            <summary>
            Converts this <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor"/> into its complete list of <see cref="T:HarmonyLib.CodeInstruction"/>s.
            </summary>
        </member>
        <member name="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef">
            <summary>
            Represents a reference to a specific IL address.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.Index">
            <summary>
            The index of the referenced instruction.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.Address">
            <summary>
            The address of the referenced instruction.
            </summary>
        </member>
        <member name="P:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.Valid">
            <summary>
            Indicates whether this <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> is still valid - The reference will be invalidated if the instruction it references is removed.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.GetInsn">
            <summary>
            Marks a label at the referenced instruction, for use in branch instructions.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.MarkLabel">
            <summary>
            Marks a label at the referenced instruction, for use in branch instructions.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.GetNextRef">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction immediately after this one.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.GetPreviousRef">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction immediately before this one.
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.GetRefByOffset(System.Int32)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction with its index offset from the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.op_Addition(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Int32)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction with its index offset from the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
        <member name="M:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef.op_Subtraction(GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef,System.Int32)">
            <summary>
            Returns an <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/> for the instruction with its index offset from the given <see cref="T:GadgetCore.Util.TranspilerHelper.CILProcessor.ILRef"/>
            </summary>
        </member>
    </members>
</doc>
