using System;
using System.IO;
using System.Security.Cryptography;

namespace GadgetCore.MonoSymbol
{
	// Token: 0x020000B9 RID: 185
	internal class SourceFileEntry
	{
		// Token: 0x170001B3 RID: 435
		// (get) Token: 0x06000640 RID: 1600 RVA: 0x00027CB0 File Offset: 0x00025EB0
		public static int Size
		{
			get
			{
				return 8;
			}
		}

		// Token: 0x06000641 RID: 1601 RVA: 0x00027CC4 File Offset: 0x00025EC4
		public SourceFileEntry(MonoSymbolFile file, string file_name)
		{
			this.file = file;
			this.file_name = file_name;
			this.Index = file.AddSource(this);
			this.creating = true;
		}

		// Token: 0x06000642 RID: 1602 RVA: 0x00027CF0 File Offset: 0x00025EF0
		public SourceFileEntry(MonoSymbolFile file, string sourceFile, byte[] guid, byte[] checksum) : this(file, sourceFile, sourceFile, guid, checksum)
		{
		}

		// Token: 0x06000643 RID: 1603 RVA: 0x00027D00 File Offset: 0x00025F00
		public SourceFileEntry(MonoSymbolFile file, string fileName, string sourceFile, byte[] guid, byte[] checksum) : this(file, fileName)
		{
			this.guid = guid;
			this.hash = checksum;
			this.sourceFile = sourceFile;
		}

		// Token: 0x170001B4 RID: 436
		// (get) Token: 0x06000644 RID: 1604 RVA: 0x00027D24 File Offset: 0x00025F24
		public byte[] Checksum
		{
			get
			{
				return this.hash;
			}
		}

		// Token: 0x06000645 RID: 1605 RVA: 0x00027D3C File Offset: 0x00025F3C
		internal void WriteData(MyBinaryWriter bw)
		{
			this.DataOffset = (int)bw.BaseStream.Position;
			bw.Write(this.file_name);
			bool flag = this.guid == null;
			if (flag)
			{
				this.guid = new byte[16];
			}
			bool flag2 = this.hash == null;
			if (flag2)
			{
				try
				{
					using (FileStream fileStream = new FileStream(this.sourceFile, FileMode.Open, FileAccess.Read))
					{
						MD5 md = MD5.Create();
						this.hash = md.ComputeHash(fileStream);
					}
				}
				catch
				{
					this.hash = new byte[16];
				}
			}
			bw.Write(this.guid);
			bw.Write(this.hash);
			bw.Write(this.auto_generated ? 1 : 0);
		}

		// Token: 0x06000646 RID: 1606 RVA: 0x00027E24 File Offset: 0x00026024
		internal void Write(BinaryWriter bw)
		{
			bw.Write(this.Index);
			bw.Write(this.DataOffset);
		}

		// Token: 0x06000647 RID: 1607 RVA: 0x00027E44 File Offset: 0x00026044
		internal SourceFileEntry(MonoSymbolFile file, MyBinaryReader reader)
		{
			this.file = file;
			this.Index = reader.ReadInt32();
			this.DataOffset = reader.ReadInt32();
			int num = (int)reader.BaseStream.Position;
			reader.BaseStream.Position = (long)this.DataOffset;
			this.sourceFile = (this.file_name = reader.ReadString());
			this.guid = reader.ReadBytes(16);
			this.hash = reader.ReadBytes(16);
			this.auto_generated = (reader.ReadByte() == 1);
			reader.BaseStream.Position = (long)num;
		}

		// Token: 0x170001B5 RID: 437
		// (get) Token: 0x06000648 RID: 1608 RVA: 0x00027EE8 File Offset: 0x000260E8
		// (set) Token: 0x06000649 RID: 1609 RVA: 0x00027F00 File Offset: 0x00026100
		public string FileName
		{
			get
			{
				return this.file_name;
			}
			set
			{
				this.file_name = value;
			}
		}

		// Token: 0x170001B6 RID: 438
		// (get) Token: 0x0600064A RID: 1610 RVA: 0x00027F0C File Offset: 0x0002610C
		public bool AutoGenerated
		{
			get
			{
				return this.auto_generated;
			}
		}

		// Token: 0x0600064B RID: 1611 RVA: 0x00027F24 File Offset: 0x00026124
		public void SetAutoGenerated()
		{
			bool flag = !this.creating;
			if (flag)
			{
				throw new InvalidOperationException();
			}
			this.auto_generated = true;
			this.file.OffsetTable.FileFlags |= OffsetTable.Flags.IsAspxSource;
		}

		// Token: 0x0600064C RID: 1612 RVA: 0x00027F64 File Offset: 0x00026164
		public bool CheckChecksum()
		{
			bool result;
			try
			{
				using (FileStream fileStream = new FileStream(this.sourceFile, FileMode.Open))
				{
					MD5 md = MD5.Create();
					byte[] array = md.ComputeHash(fileStream);
					for (int i = 0; i < 16; i++)
					{
						bool flag = array[i] != this.hash[i];
						if (flag)
						{
							return false;
						}
					}
					result = true;
				}
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x0600064D RID: 1613 RVA: 0x00027FF4 File Offset: 0x000261F4
		public override string ToString()
		{
			return string.Format("SourceFileEntry ({0}:{1})", this.Index, this.DataOffset);
		}

		// Token: 0x040003B9 RID: 953
		public readonly int Index;

		// Token: 0x040003BA RID: 954
		private int DataOffset;

		// Token: 0x040003BB RID: 955
		private MonoSymbolFile file;

		// Token: 0x040003BC RID: 956
		private string file_name;

		// Token: 0x040003BD RID: 957
		private byte[] guid;

		// Token: 0x040003BE RID: 958
		private byte[] hash;

		// Token: 0x040003BF RID: 959
		private bool creating;

		// Token: 0x040003C0 RID: 960
		private bool auto_generated;

		// Token: 0x040003C1 RID: 961
		private readonly string sourceFile;
	}
}
